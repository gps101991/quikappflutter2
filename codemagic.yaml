definitions:
  # mac_mini_m1: &mac_mini_m1
  #  instance_type: mac_mini_m1
  # max_build_duration: 60

  environment:
    app_details:
      vars:
        VERSION_NAME: $VERSION_NAME
        VERSION_CODE: $VERSION_CODE
        KEY_STORE: $KEY_STORE
        CM_KEYSTORE_PASSWORD: $CM_KEYSTORE_PASSWORD
        CM_KEY_ALIAS: $CM_KEY_ALIAS
        CM_KEY_PASSWORD: $CM_KEY_PASSWORD
        APP_NAME: $APP_NAME
        ORG_NAME: $ORG_NAME
        IS_SPLASH: $IS_SPLASH
        SPLASH: $SPLASH
        SPLASH_BG: $SPLASH_BG
        SPLASH_BG_COLOR: $SPLASH_BG_COLOR
        SPLASH_TAGLINE: $SPLASH_TAGLINE
        SPLASH_TAGLINE_COLOR: $SPLASH_TAGLINE_COLOR
        SPLASH_ANIMATION: $SPLASH_ANIMATION
        SPLASH_DURATION: $SPLASH_DURATION
        LOGO_URL: $LOGO_URL
        WEB_URL: $WEB_URL
        firebase_config_android: $firebase_config_android
        firebase_config_ios: $firebase_config_ios
        APNS_KEY_ID: $APNS_KEY_ID
        APPLE_TEAM_ID: $APPLE_TEAM_ID
        APNS_AUTH_KEY_URL: $APNS_AUTH_KEY_URL
        APP_STORE_CONNECT_PRIVATE_KEY: $APP_STORE_CONNECT_PRIVATE_KEY
        APP_STORE_CONNECT_ISSUER_ID: $APP_STORE_CONNECT_ISSUER_ID
        APP_STORE_CONNECT_KEY_IDENTIFIER: $APP_STORE_CONNECT_KEY_IDENTIFIER
        CERT_URL: $CERT_URL
        CERT_PASSWORD: $CERT_PASSWORD
        PROFILE_URL: $PROFILE_URL
        PKG_NAME: $PKG_NAME
        BUNDLE_ID: $BUNDLE_ID
        EMAIL_ID: $EMAIL_ID
        PUSH_NOTIFY: $PUSH_NOTIFY
        IS_CAMERA: $IS_CAMERA
        IS_LOCATION: $IS_LOCATION
        IS_MIC: $IS_MIC
        IS_NOTIFICATION: $IS_NOTIFICATION
        IS_CONTACT: $IS_CONTACT
        IS_BIOMETRIC: $IS_BIOMETRIC
        IS_CALENDAR: $IS_CALENDAR
        IS_STORAGE: "true" # Always true by default
        IS_PULLDOWN: $IS_PULLDOWN
        IS_BOTTOMMENU: $IS_BOTTOMMENU
        IS_CHATBOT: $IS_CHATBOT
        BOTTOMMENU_ITEMS: $BOTTOMMENU_ITEMS
        BOTTOMMENU_BG_COLOR: $BOTTOMMENU_BG_COLOR
        BOTTOMMENU_ICON_COLOR: $BOTTOMMENU_ICON_COLOR
        BOTTOMMENU_TEXT_COLOR: $BOTTOMMENU_TEXT_COLOR
        BOTTOMMENU_FONT: $BOTTOMMENU_FONT
        BOTTOMMENU_FONT_SIZE: $BOTTOMMENU_FONT_SIZE
        BOTTOMMENU_FONT_BOLD: $BOTTOMMENU_FONT_BOLD
        BOTTOMMENU_FONT_ITALIC: $BOTTOMMENU_FONT_ITALIC
        BOTTOMMENU_ACTIVE_TAB_COLOR: $BOTTOMMENU_ACTIVE_TAB_COLOR
        BOTTOMMENU_ICON_POSITION: $BOTTOMMENU_ICON_POSITION
        BOTTOMMENU_VISIBLE_ON: $BOTTOMMENU_VISIBLE_ON
        IS_DEEPLINK: $IS_DEEPLINK
        IS_LOAD_IND: $IS_LOAD_IND

  artifacts:
    #- &ipa_file build/ios/ipa/*.ipa
    #- &xcode_log /tmp/xcodebuild_logs/*.log
    #- &dsym $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
    # - &app $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.app
    #    - &android_abb build/**/outputs/**/*.aab
    #    - &android_apk build/**/outputs/**/*.apk
    - &android_abb build/**/outputs/**/*.aab
    - &android_apk build/**/outputs/**/*.apk
    - &ios_app build/ios/ipa/*.ipa
    #- &android_mapping_txt build/**/outputs/**/mapping.txt
    #3- &flutter_drive_log flutter_drive.log

  email_release: &email_release
    email:
      recipients:
        - $EMAIL_ID
        # - thamaraikannan137@gmail.com
      notify:
        success: true
        failure: true

  scripts:
    - &debug_env
      name: Debug Environment Variables
      script: |
        echo "*********** App Name & Version ***********"
        echo "APP_NAME: $APP_NAME"
        echo "ORG_NAME: $ORG_NAME"
        echo "WEB_URL: $WEB_URL"
        echo "VERSION_NAME: $VERSION_NAME"      
        echo "VERSION_CODE: $VERSION_CODE" 
        echo "PKG_NAME: $PKG_NAME"
        echo "BUNDLE_ID: $BUNDLE_ID"

        echo "*********** App Customization Configuration ***********"
        echo "Splash screen: $IS_SPLASH"
        echo "Pull to refresh: $IS_PULLDOWN"
        echo "Loading indicators: $IS_LOAD_IND"
        echo "Bottom navigation bar: $IS_BOTTOMMENU"
        echo "Deep linking: $IS_DEEPLINK"

        echo "*********** Push Notification Configuration ***********"
        echo "PUSH_NOTIFY: $PUSH_NOTIFY"
        echo "IS_CHATBOT: $IS_CHATBOT"

        echo "*********** Android Keystore ***********"
        echo "KEY_STORE: $KEY_STORE"
        echo "CM_KEYSTORE_PASSWORD: $CM_KEYSTORE_PASSWORD"
        echo "CM_KEY_ALIAS: $CM_KEY_ALIAS"
        echo "CM_KEY_PASSWORD: $CM_KEY_PASSWORD"

        echo "*********** IOS Keystore ***********"
        echo "APP_STORE_CONNECT_ISSUER_ID: $APP_STORE_CONNECT_ISSUER_ID"
        echo "APP_STORE_CONNECT_KEY_IDENTIFIER: $APP_STORE_CONNECT_KEY_IDENTIFIER"
        echo "APNS_KEY_ID: $APNS_KEY_ID"
        echo "TEAM_ID: $APPLE_TEAM_ID"
        echo "APNS_AUTH_KEY_URL: $APNS_AUTH_KEY_URL"

        echo "*********** Firebase Android config file ***********"
        echo "firebase_config_android: $firebase_config_android"

        echo "*********** Firebase IOS config file ***********"
        echo "firebase_config_ios: $firebase_config_ios"

        echo "*********** Splash Configuration ***********"
        echo "SPLASH: $SPLASH"
        echo "SPLASH_BG:$SPLASH_BG"
        echo "SPLASH_BG_COLOR: $SPLASH_BG_COLOR"
        echo "SPLASH_TAGLINE: $SPLASH_TAGLINE"
        echo "SPLASH_TAGLINE_COLOR: $SPLASH_TAGLINE_COLOR"
        echo "SPLASH_ANIMATION: $SPLASH_ANIMATION"
        echo "SPLASH_DURATION: $SPLASH_DURATION"
        
        echo "*********** Bottom Navigation Configuration ***********"
        echo "BOTTOMMENU_ITEMS: $BOTTOMMENU_ITEMS"
        echo "BOTTOMMENU_BG_COLOR: $BOTTOMMENU_BG_COLOR"
        echo "BOTTOMMENU_ICON_COLOR: $BOTTOMMENU_ICON_COLOR"
        echo "BOTTOMMENU_TEXT_COLOR: $BOTTOMMENU_TEXT_COLOR"
        echo "BOTTOMMENU_FONT: $BOTTOMMENU_FONT"
        echo "BOTTOMMENU_FONT_SIZE: $BOTTOMMENU_FONT_SIZE"
        echo "BOTTOMMENU_FONT_BOLD: $BOTTOMMENU_FONT_BOLD"
        echo "BOTTOMMENU_FONT_ITALIC: $BOTTOMMENU_FONT_ITALIC"
        echo "BOTTOMMENU_ACTIVE_TAB_COLOR: $BOTTOMMENU_ACTIVE_TAB_COLOR"
        echo "BOTTOMMENU_ICON_POSITION: $BOTTOMMENU_ICON_POSITION"
        echo "BOTTOMMENU_VISIBLE_ON: $BOTTOMMENU_VISIBLE_ON"

        echo "*********** Permissions ***********"
        echo "IS_CAMERA: $IS_CAMERA"
        echo "IS_LOCATION: $IS_LOCATION"
        echo "IS_MIC: $IS_MIC"
        echo "IS_NOTIFICATION: $IS_NOTIFICATION"
        echo "IS_CONTACT: $IS_CONTACT"
        echo "IS_BIOMETRIC: $IS_BIOMETRIC"
        echo "IS_CALENDAR: $IS_CALENDAR"

        echo "*********** Publish Configuration ***********" 
        echo "EMAIL_ID: $EMAIL_ID"
    - &Get_Font
      name: Download and Install Google Font
      script: |
        FONT_NAME="$BOTTOMMENU_FONT"
        FONT_DIR="$FLUTTER_ROOT/assets/fonts"
        PUBSPEC_PATH="pubspec.yaml"

        # Convert font name for Google Fonts API (Primary) and GitHub (Fallback)
        FONT_NAME_API=$(echo "$FONT_NAME" | sed 's/ /+/g')
        FONT_URL="https://fonts.google.com/download?family=$FONT_NAME_API"

        mkdir -p "$FONT_DIR"

        # Try downloading from Google Fonts API
        wget -q "$FONT_URL" -O /tmp/font.zip

        # Check if the downloaded file is a valid zip archive
        if ! unzip -t /tmp/font.zip &> /dev/null; then
        FONT_FOLDER=$(echo "$FONT_NAME" | tr '[:upper:]' '[:lower:]' | sed 's/ //g')
        FONT_URL_GITHUB="https://github.com/google/fonts/trunk/ofl/$FONT_FOLDER"
        echo "‚ö†Ô∏è Google Fonts API failed or invalid file. Trying GitHub: $FONT_URL_GITHUB"

        svn export "$FONT_URL_GITHUB" "$FONT_DIR" --force --quiet

        if [ $? -ne 0 ]; then
        echo "‚ùå Failed to download $FONT_NAME from both sources."
        exit 1
        fi
        else
        unzip -o /tmp/font.zip -d "$FONT_DIR"
        fi

        echo "‚úÖ Font $FONT_NAME downloaded and extracted."

        # Backup existing pubspec.yaml
        cp "$PUBSPEC_PATH" "$PUBSPEC_PATH.bak"

        # Check if the fonts block exists
        if ! grep -q "fonts:" "$PUBSPEC_PATH"; then
        # Add fonts block if not present
        echo "flutter:" >> "$PUBSPEC_PATH"
        echo "  fonts:" >> "$PUBSPEC_PATH"
        fi

        # Add new font family under existing fonts block
        if ! grep -q "- family: '$FONT_NAME'" "$PUBSPEC_PATH"; then
        echo "  - family: '$FONT_NAME'" >> "$PUBSPEC_PATH"
        for font in $(find $FONT_DIR -name "*.ttf" -o -name "*.otf"); do
        echo "      - asset: $font" >> "$PUBSPEC_PATH"
        done
        fi

        flutter pub get
        if [ $? -ne 0 ]; then
        echo "‚ùå Failed to get Flutter dependencies"
        exit 1
        fi

        echo "‚úÖ Font installation and pubspec.yaml update completed."

    - &get_splash
      name: Get splash screen image from splash image from Url
      script: |
        if [ "$IS_SPLASH" = "true" ]; then
           if [ -f assets/images/splash.png ]; then
            rm assets/images/splash.png
            echo "‚úÖ Deleted: assets/images/splash.png"
            else
            echo "‚ö†Ô∏è splash.png not found"
            fi
        
          echo "üöÄ Started: Downloading splash assets"

          mkdir -p assets/images/

          # Download splash logo
          echo "‚¨áÔ∏è Downloading splash logo from: $SPLASH"
          wget -O assets/images/splash.png "$SPLASH"
          if [ $? -ne 0 ]; then
            echo "‚ö†Ô∏è Certificate issue or download failed. Retrying with --no-check-certificate..."
            wget --no-check-certificate -O assets/images/splash.png "$SPLASH"
          fi

          if [ ! -f assets/images/splash.png ]; then
            echo "‚ùå Error: Failed to download SPLASH logo"
            exit 1
          fi

          # Download splash background (optional)
          if [ -n "$SPLASH_BG" ]; then
            echo "‚¨áÔ∏è Downloading splash background from: $SPLASH_BG"
            wget -O assets/images/splash_bg.png "$SPLASH_BG"
            if [ $? -ne 0 ]; then
              echo "‚ö†Ô∏è Certificate issue or download failed. Retrying with --no-check-certificate..."
              wget --no-check-certificate -O assets/images/splash_bg.png "$SPLASH_BG"
            fi

            if [ ! -f assets/images/splash_bg.png ]; then
              echo "‚ùå Error: Failed to download SPLASH background"
              exit 1
            fi
          else
            echo "‚ÑπÔ∏è No SPLASH_BG provided, skipping background download"
          fi

          flutter pub get
          echo "‚úÖ Completed: Splash assets downloaded"
        else
          echo "‚è≠Ô∏è Skipping splash asset download (IS_SPLASH != true)"
        fi

    - &change_proj_name
      name: Change Project Name
      script: |
        echo "App Name: $APP_NAME"
        # 2Ô∏è‚É£ Sanitize: lowercase, remove special characters, replace spaces with underscores
          SANITIZED_NAME=$(echo "$APP_NAME" | tr '[:upper:]' '[:lower:]' | tr -cd 'a-z0-9 ' | tr ' ' '_')

        # 3Ô∏è‚É£ Extract old name from pubspec.yaml
        OLD_NAME_LINE=$(grep '^name: ' pubspec.yaml)
        OLD_NAME=$(echo "$OLD_NAME_LINE" | cut -d ' ' -f2)

        echo "üîÅ Renaming project from '$OLD_NAME' to '$SANITIZED_NAME'..."

        # Update pubspec.yaml
        sed -i '' "s/^name: .*/name: $SANITIZED_NAME/" pubspec.yaml

        # Update Dart imports
          echo "üîÑ Updating Dart package imports..."
          grep -rl "package:$OLD_NAME" lib/ | xargs sed -i '' "s/package:$OLD_NAME/package:$SANITIZED_NAME/g"
        
        
        
          # iOS: Update CFBundleName in Info.plist
          echo "üõ†Ô∏è Updating iOS CFBundleName..."
          plutil -replace CFBundleName -string "$APP_NAME" ios/Runner/Info.plist
        
          # Optional: Rename folder (if not on CI/CD)
          # cd ..
          # mv "$OLD_NAME" "$SANITIZED_NAME"
          # cd "$SANITIZED_NAME"
        
          # Clean and get packages
          flutter clean
          flutter pub get
        
          echo "‚úÖ Project renamed to '$SANITIZED_NAME'"
        
          echo "üöÄ iOS CFBundleName set to '$APP_NAME'"

    - &get_logo
      name: Get logo image from logoUrl
      script: |
        echo "üßπ Deleting old splash and logo assets..."
        
        if [ -f assets/images/logo.png ]; then
        rm assets/images/logo.png
        echo "‚úÖ Deleted: assets/images/logo.png"
        else
        echo "‚ö†Ô∏è logo.png not found"
        fi
        echo "üöÄ Started: Downloading logo from $LOGO_URL"

        mkdir -p assets/images/
        
        # Try downloading with SSL certificate check first (silent test)
        wget --spider --quiet "$LOGO_URL"
        if [ $? -ne 0 ]; then
          echo "‚ö†Ô∏è SSL verification failed. Retrying with --no-check-certificate..."
          WGET_OPTS="--no-check-certificate"
        else
          WGET_OPTS=""
        fi

        # Attempt actual download
        wget $WGET_OPTS -O assets/images/logo.png "$LOGO_URL"

        # Check if the file was successfully downloaded
        if [ ! -f assets/images/logo.png ]; then
          echo "‚ùå Error: Failed to download logo from $LOGO_URL"
          exit 1
        fi

        flutter pub get
        echo "‚úÖ Completed: Logo downloaded"

    - &set_launcher_icons
      name: Generate Launcher Icons
      script: |
        echo "üöÄ Generating launcher icons"

        flutter pub get

        # Generates launcher icons using flutter_launcher_icons configuration in pubspec.yaml
        flutter pub run flutter_launcher_icons

        echo "‚úÖ Launcher icons generated successfully"

    - &change_app_name
      name: Change app name
      script: |
        echo "üöÄ Changing app name to: $APP_NAME"

          flutter pub run rename setAppName --value "$APP_NAME"
          echo "üî¢ VERSION_NAME: $VERSION_NAME"
          echo "üî¢ VERSION_CODE: $VERSION_CODE"
            # Default values
          VERSION_NAME="${VERSION_NAME:-1.0.0}"
          VERSION_CODE="${VERSION_CODE:-100}"

          # Check if VERSION_NAME is empty or not set
          if [ -z "$VERSION_NAME" ]; then
            VERSION_NAME=$DEFAULT_VERSION_NAME
            echo "üî¢ Setting DEFAULT_VERSION_NAME"
          fi

          # Check if VERSION_CODE is empty or not set
          if [ -z "$VERSION_CODE" ]; then
            VERSION_CODE=$DEFAULT_VERSION_CODE
            echo "üî¢ Setting DEFAULT_VERSION_CODE"
          fi

          echo "üî¢ VERSION_NAME: $VERSION_NAME"
          echo "üî¢ VERSION_CODE: $VERSION_CODE"

          echo "üîß Ensuring valid version in pubspec.yaml: $VERSION_NAME+$VERSION_CODE"
          # Replace or add version line in pubspec.yaml
          if grep -q "^version: " pubspec.yaml; then
            sed -i.bak -E "s/^version: .*/version: $VERSION_NAME+$VERSION_CODE/" pubspec.yaml
          else
          echo "version: $VERSION_NAME+$VERSION_CODE" >> pubspec.yaml
          fi

          flutter pub get

          echo "‚úÖ App name changed and version set successfully"

    - &Inject_Firebase_iOS_Push
      name: Firebase Push Notification Setup for iOS
      script: |
          if [ "$PUSH_NOTIFY" = "true" ]; then
          echo "üîî Enabling Firebase Push Notifications for iOS..."
        
          # 1. Download and apply Firebase config
          mkdir -p firebase/ios
          if [ -n "$firebase_config_ios" ]; then
          wget -O firebase/ios/GoogleService-Info.plist "$firebase_config_ios"
          else
          echo "‚ùå firebase_config_ios is empty. Cannot proceed with Firebase setup."
          exit 1
          fi
        
          if [ -f "firebase/ios/GoogleService-Info.plist" ]; then
          cp firebase/ios/GoogleService-Info.plist ios/Runner/GoogleService-Info.plist
          echo "‚úÖ GoogleService-Info.plist copied."
          else
          echo "‚ùå Missing GoogleService-Info.plist. Cannot proceed with Firebase setup."
          exit 1
          fi
        
          # 2. Add Firebase SDK via Package.resolved (optional)
          if [ -f "firebase/ios/Package.resolved" ]; then
          mkdir -p ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/
          cp firebase/ios/Package.resolved ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved
          echo "üì¶ Firebase SDK resolved from committed Package.resolved."
          else
          echo "‚ö†Ô∏è Package.resolved not found. Firebase SDK must be added manually in Xcode."
          fi
        
          # 3. Download APNs Auth Key (Optional)
          if [ -n "$APNS_AUTH_KEY_URL" ]; then
          wget -O firebase/ios/AuthKey.p8 "$APNS_AUTH_KEY_URL"
          echo "üì• Downloaded AuthKey.p8 for APNs"
          fi
          
  
          # 4. Create APNs entitlement
            cat > ios/Runner/Runner.entitlements <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>aps-environment</key>
            <string>production</string>
          </dict>
          </plist>
          EOF
          echo "‚úÖ Created ios/Runner/Runner.entitlements"
          
          # 5. Check APNs entitlements
          if grep -q "aps-environment" ios/Runner/Runner.entitlements; then
          echo "‚úÖ APNs entitlements enabled."
          else
          echo "‚ö†Ô∏è Warning: APNs entitlement missing from Runner.entitlements."
          fi
          else
          echo "üö´ PUSH_NOTIFY is false. Skipping Firebase push notification setup for iOS."
          rm -f ios/Runner/GoogleService-Info.plist
          rm -f ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved
          echo "üßπ Cleaned up Firebase iOS config."
          fi

    - &Inject_Firebase_new
      name: Inject Firebase and buildscript block
      script: |
        echo "üîß Checking Firebase configuration for Android..."

        # Function to download with retry and SSL check
        download_with_retry() {
            local url=$1
            local output=$2
            local max_retries=3
            local retry_delay=5
            local attempt=1
            local WGET_OPTS=""
        
            while [ $attempt -le $max_retries ]; do
                echo "‚û°Ô∏è Attempt $attempt to download $url"
                wget --spider --quiet "$url"
                if [ $? -ne 0 ]; then
                    echo "‚ö†Ô∏è SSL verification failed. Using --no-check-certificate"
                    WGET_OPTS="--no-check-certificate"
                else
                    WGET_OPTS=""
                fi
        
                wget $WGET_OPTS -O "$output" "$url"
                if [ $? -eq 0 ]; then
                    echo "‚úÖ Successfully downloaded $output"
                    return 0
                else
                    echo "‚ùå Download failed on attempt $attempt"
                fi
        
                attempt=$((attempt + 1))
                if [ $attempt -le $max_retries ]; then
                    echo "‚è≥ Waiting $retry_delay seconds before retry..."
                    sleep $retry_delay
                fi
            done
        
            echo "üö® Failed to download $url after $max_retries attempts."
            return 1
        }

        # Check and update the project-level build.gradle
        PROJECT_BUILD_FILE="android/build.gradle"
        APP_BUILD_FILE="android/app/build.gradle"
        GOOGLE_SERVICES_CLASSPATH="classpath 'com.google.gms:google-services:4.3.15'"
        GOOGLE_SERVICES_PLUGIN="apply plugin: 'com.google.gms.google-services'"

        # Conditional Firebase integration based on PUSH_NOTIFY flag
        if [ "$PUSH_NOTIFY" = "true" ]; then
            echo "üì¶ Enabling Firebase integration..."

            # Check if Firebase classpath is already present in the project-level build.gradle
            if ! grep -q 'com.google.gms:google-services' $PROJECT_BUILD_FILE; then
                echo "‚úÖ Firebase classpath not found, injecting..."
        
                if ! grep -q 'buildscript {' $PROJECT_BUILD_FILE; then
                    # No buildscript block found ‚Äì inject the entire block at the top
                    echo 'buildscript {
                      repositories {
                          google()
                          mavenCentral()
                      }
                      dependencies {
                          classpath "com.google.gms:google-services:4.3.15"
                      }
                  }' > temp.gradle
                    cat $PROJECT_BUILD_FILE >> temp.gradle
                    mv temp.gradle $PROJECT_BUILD_FILE
                    echo "‚úÖ Full buildscript block injected"
                else
                    # buildscript exists ‚Äì insert the classpath into the dependencies
                    sed -i '' '/dependencies {/a\\
                classpath "com.google.gms:google-services:4.3.15"' $PROJECT_BUILD_FILE
                    echo "‚úÖ Firebase classpath inserted into existing buildscript"
                fi
            else
                echo "‚úÖ Firebase classpath already present, skipping injection"
            fi

            # Check if Google services plugin is applied at the bottom of app-level build.gradle
            if ! grep -q "$GOOGLE_SERVICES_PLUGIN" $APP_BUILD_FILE; then
                echo "‚úÖ Google services plugin not found, injecting..."
                echo -e "\n$GOOGLE_SERVICES_PLUGIN" >> $APP_BUILD_FILE
                echo "‚úÖ Plugin applied at the bottom of $APP_BUILD_FILE"
            else
                echo "‚úÖ Google services plugin already applied, skipping"
            fi
        
            echo "üì• Downloading google-services.json..."
            mkdir -p android/app

            # Download Firebase configuration file
            download_with_retry "$firebase_config_android" "android/app/google-services.json"
        
            echo "üîß Updating values.xml file"
            mkdir -p android/app/src/main/res/values/
            cat > android/app/src/main/res/values/values.xml << 'EOF'
            <?xml version="1.0" encoding="utf-8"?>
            <resources>
                <string name="default_web_client_id">${FIREBASE_WEB_CLIENT_ID}</string>
                <string name="firebase_database_url">${FIREBASE_DATABASE_URL}</string>
                <string name="gcm_defaultSenderId">${FIREBASE_SENDER_ID}</string>
                <string name="google_api_key">${FIREBASE_API_KEY}</string>
                <string name="google_app_id">${FIREBASE_APP_ID}</string>
                <string name="google_crash_reporting_api_key">${FIREBASE_CRASH_REPORTING_KEY}</string>
                <string name="project_id">${FIREBASE_PROJECT_ID}</string>
            </resources>
            EOF
            echo "‚úÖ values.xml file created successfully."
        else
            echo "üö´ Firebase config skipped (PUSH_NOTIFY is not true)"
        fi

    - &Inject_Firebase_Services
      name: Inject Google Services Plugin
      script: |
        if [ -f android/app/google-services.json ]; then
        echo "‚úÖ File found"
        else
        echo "‚ùå Missing google-services.json"
        exit 1
        fi
        set -e
        
        if [ "$PUSH_NOTIFY" = "true" ]; then
        echo "‚úÖ Google Services Plugin: Start injecting..."
        
        FIREBASE_CLASSPATH='classpath("com.google.gms:google-services:4.3.15")'
        DESUGAR_DEP='implementation("com.android.tools:desugar_jdk_libs:2.0.4")'
        
        PROJECT_BUILD_FILE="android/build.gradle.kts"
        APP_BUILD_FILE="android/app/build.gradle.kts"
        
        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Add classpath to android/build.gradle.kts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        if ! grep -q "com.google.gms:google-services" "$PROJECT_BUILD_FILE"; then
        echo "üîß Injecting Firebase classpath into $PROJECT_BUILD_FILE..."
        awk '
        /buildscript\s*{/ { print; in_block=1; next }
        in_block && /dependencies\s*{/ {
        print; print "        classpath(\"com.google.gms:google-services:4.3.15\")"; in_block=0; next
        }
        { print }
        ' "$PROJECT_BUILD_FILE" > tmp && mv tmp "$PROJECT_BUILD_FILE"
        echo "‚úÖ Classpath injected."
        else
        echo "‚úÖ Firebase classpath already exists."
        fi
        
        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Apply plugin in android/app/build.gradle.kts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        if grep -q "plugins\s*{" "$APP_BUILD_FILE"; then
        if ! grep -q 'id("com.google.gms.google-services")' "$APP_BUILD_FILE"; then
        echo "üîß Applying Google Services plugin..."
        sed -i '' '/plugins\s*{/a\
        id("com.google.gms.google-services")
        ' "$APP_BUILD_FILE"
        echo "‚úÖ Plugin applied."
        else
        echo "‚úÖ Google Services plugin already applied."
        fi
        else
        echo "‚ùå plugins block not found in $APP_BUILD_FILE"
        exit 1
        fi
        
        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Add desugar dependency ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        if ! grep -q 'desugar_jdk_libs' "$APP_BUILD_FILE"; then
        echo "üîß Adding desugar_jdk_libs dependency..."
        sed -i '' '/dependencies\s*{/a\
        coreLibraryDesugaring('"$DESUGAR_DEP"')
        ' "$APP_BUILD_FILE"
        else
        echo "‚úÖ Desugar dependency already added."
        fi
        
        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Enable desugaring in compileOptions ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        if ! grep -q 'isCoreLibraryDesugaringEnabled = true' "$APP_BUILD_FILE"; then
        echo "üîß Enabling desugaring in compileOptions..."
        sed -i '' '/compileOptions\s*{/a\
        isCoreLibraryDesugaringEnabled = true
        ' "$APP_BUILD_FILE"
        else
        echo "‚úÖ Desugaring already enabled in compileOptions."
        fi
        
        else
        echo "üö´ Firebase config skipped (PUSH_NOTIFY is not true)"
        fi
    
    

    #        set -e
    #
    #          if [ "$PUSH_NOTIFY" = "true" ]; then
    #          echo "‚úÖ Google Services Plugin: Start injecting..."
    #
    #          FIREBASE_CLASSPATH='classpath "com.google.gms:google-services:4.3.15"'
    #          CLD_CLASSPATH = 'coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.4' // Or latest'
    #          if ! grep -q 'com.google.gms:google-services' android/build.gradle; then
    #          echo "‚úÖ Firebase classpath not found, injecting..."
    #
    #          if ! grep -q 'buildscript {' android/build.gradle; then
    #          echo "üîß No buildscript block found, injecting entire block..."
    #
    #          printf 'buildscript {\n  repositories {\n    google()\n    mavenCentral()\n  }\n  dependencies {\n    %s\n  }\n}\n\n' "$FIREBASE_CLASSPATH" | cat - android/build.gradle > temp && mv temp android/build.gradle
    #
    #          echo "‚úÖ Full buildscript block injected"
    #          else
    #          echo "üîß buildscript block found, inserting classpath..."
    #
    #          # In-place edit to insert classpath line inside dependencies block
    #          sed -i '' "/buildscript {/,/dependencies {/ s/dependencies {/dependencies {\n    $FIREBASE_CLASSPATH \n$CLD_CLASSPATH/" android/build.gradle
    #
    #          echo "‚úÖ Firebase classpath inserted"
    #          fi
    #          else
    #          echo "‚úÖ Firebase classpath already present, skipping injection"
    #          fi
    #
    #          echo "üîß Checking for Google Services plugin in android/app/build.gradle..."
    #
    #          if ! grep -q "com.google.gms.google-services" android/app/build.gradle; then
    #          echo "üîß Adding Google Services plugin to android/app/build.gradle"
    #          echo -e "\napply plugin: 'com.google.gms.google-services'" >> android/app/build.gradle
    #          echo "‚úÖ Google Services plugin added"
    #          else
    #          echo "‚úÖ Google Services plugin already present"
    #          fi
    #          else
    #          echo "üö´ Firebase config skipped (PUSH_NOTIFY is not true)"
    #          fi



    - &get_json
      name: Get JSON file & Prepare Firebase configuration
      script: |

        if [ "$PUSH_NOTIFY" = "true" ]; then
        echo "üì• Downloading google-services.json..."
        
        # Ensure target directories exist
        mkdir -p android/app
        
        
        # Function to download with retry and SSL check
        download_with_retry() {
        local url=$firebase_config_android
        local output=android/app/google-services.json
        local max_retries=3
        local retry_delay=5
        local attempt=1
        local WGET_OPTS=""
        echo "url=$firebase_config_android"
        echo "output=android/app/google-services.json"
        echo "max_retries=3"
        echo "attempt=1"
        while [ $attempt -le $max_retries ]; do
        echo "‚û°Ô∏è Attempt $attempt to download $url"
        wget --spider --quiet "$url"
        if [ $? -ne 0 ]; then
        echo "‚ö†Ô∏è SSL verification failed. Using --no-check-certificate"
        WGET_OPTS="--no-check-certificate"
        else
        WGET_OPTS=""
        fi
        
        wget $WGET_OPTS -O "$output" "$url"
        if [ $? -eq 0 ]; then
        echo "‚úÖ Successfully downloaded $output"
        return 0
        else
        echo "‚ùå Download failed on attempt $attempt"
        fi
        
        attempt=$((attempt + 1))
        if [ $attempt -le $max_retries ]; then
        echo "‚è≥ Waiting $retry_delay seconds before retry..."
        sleep $retry_delay
        fi
        done
        
        echo "üö® Failed to download $url after $max_retries attempts."
        return 1
        }
        
        # Download files with retry
        download_with_retry "$firebase_config_android" "android/app/google-services.json"

         if [ -f android/app/google-services.json ]; then
            echo "‚úÖ File found"
          else
            echo "‚ùå Missing google-services.json"
            exit 1
          fi
        else
        echo "üö´ Firebase config skipped (PUSH_NOTIFY is not true)"
        fi
    

    #        if [ "$PUSH_NOTIFY" = "true" ]; then
    #        echo "üì• Downloading google-services.json..."
    #
    #        # Ensure target directories exist
    #        mkdir -p android/app
    #        mkdir -p assets
    #
    #        # Try downloading with SSL verification first
    #        wget --spider --quiet "$firebase_config_android"
    #        if [ $? -ne 0 ]; then
    #        echo "‚ö†Ô∏è SSL verification failed. Retrying with --no-check-certificate..."
    #        WGET_OPTS="--no-check-certificate"
    #        else
    #        WGET_OPTS=""
    #        fi
    #
    #        # Download the file(s) using determined option
    #        wget $WGET_OPTS -O android/app/google-services.json "$firebase_config_android"
    #        wget $WGET_OPTS -O assets/google-services.json "$firebase_config_android"
    #        else
    #        echo "üö´ Firebase config skipped (PUSH_NOTIFY is not true)"
    #        fi

    - &Inject_Firebase_old
      name: Inject Firebase and buildscript block
      script: |
        if [ "$PUSH_NOTIFY" = "true" ]; then
          echo "üì¶ Enabling Firebase integration..."

          # Check if Firebase classpath is already present
          if ! grep -q 'com.google.gms:google-services' android/build.gradle; then
            echo "‚úÖ Firebase classpath not found, injecting..."

            if ! grep -q 'buildscript {' android/build.gradle; then
              # No buildscript block found ‚Äì inject the entire block at the top
              sed -i '1s;^;buildscript {\n  repositories {\n    google()\n    mavenCentral()\n  }\n  dependencies {\n    classpath "com.google.gms:google-services:4.3.15"\n  }\n}\n\n;' android/build.gradle
              echo "‚úÖ Full buildscript block injected"
            else
              # buildscript exists ‚Äì insert the classpath into the dependencies
              sed -i '/buildscript {/,/}/ s/dependencies {/dependencies {\n    classpath "com.google.gms:google-services:4.3.15"/' android/build.gradle
              echo "‚úÖ Firebase classpath inserted into existing buildscript"
            fi
          else
            echo "‚úÖ Firebase classpath already present, skipping injection"
          fi
        else
          echo "üö´ Firebase config skipped (PUSH_NOTIFY is not true)"
        fi

    - &Update_SDK_Version
      name: Updating SDK Version for Android & iOS (Conditional)
      script: |
        if [ "$PUSH_NOTIFY" = "true" ]; then
          echo "üîß Updating Android and iOS SDK versions..."

          # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Android SDK Versions ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
          echo "üì± Updating Android minSdkVersion and targetSdkVersion in build.gradle.kts"
          ANDROID_BUILD_FILE="android/app/build.gradle.kts"

          if [ -f "$ANDROID_BUILD_FILE" ]; then
            sed -i.bak -E "s/minSdkVersion\s*=\s*\d+/minSdkVersion = 21/" "$ANDROID_BUILD_FILE"
            sed -i.bak -E "s/targetSdkVersion\s*=\s*\d+/targetSdkVersion = 34/" "$ANDROID_BUILD_FILE"
            echo "‚úÖ Android SDK versions updated in Kotlin DSL"
          else
            echo "‚ö†Ô∏è android/app/build.gradle.kts not found!"
          fi

          # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ iOS Minimum Target Version ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
          echo "üçè Updating iOS minimum deployment target in Podfile..."
          PODFILE_PATH="ios/Podfile"
          if [ -f "$PODFILE_PATH" ]; then
            sed -i.bak -E "s/platform :ios, '[0-9.]+'/platform :ios, '13.0'/" "$PODFILE_PATH"
            echo "‚úÖ iOS minimum deployment target updated to 13.0"
          else
            echo "‚ö†Ô∏è Podfile not found. Skipping iOS deployment target update."
          fi

          # Optional: Update iOS Deployment Target in project.pbxproj
          IOS_PROJECT_FILE="ios/Runner.xcodeproj/project.pbxproj"
          if [ -f "$IOS_PROJECT_FILE" ]; then
            sed -i '' -e "s/IPHONEOS_DEPLOYMENT_TARGET = .*;/IPHONEOS_DEPLOYMENT_TARGET = 13.0;/" "$IOS_PROJECT_FILE"
            echo "‚úÖ Xcode project iOS deployment target updated to 13.0"
          fi

        else
          echo "üö´ SDK version update skipped (PUSH_NOTIFY is not true)"
        fi


    - &update_package_names
      name: Update Android & iOS Package Name / Bundle ID
      script: |
        echo "üîß Updating Android and iOS package name (bundle ID)..."

        # Validate package/bundle ID format (Java-style, dot-separated)
        if [[ ! "$PKG_NAME" =~ ^[a-zA-Z_][a-zA-Z0-9_]*(\.[a-zA-Z_][a-zA-Z0-9_]*)+$ ]]; then
          echo "‚ùå ERROR: Invalid package/bundle identifier: $PKG_NAME"
          exit 1
        fi

        echo "‚úî Package name / Bundle ID: $PKG_NAME"

        echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ANDROID UPDATE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
        echo "üì¶ Updating Android package..."

        # Update using rename package
        flutter pub run rename setBundleId --value "$PKG_NAME"

        # Update package name in AndroidManifest.xml
        sed -i.bak "s/package=\"[^\"]*\"/package=\"$PKG_NAME\"/g" android/app/src/main/AndroidManifest.xml

        # Update applicationId in Kotlin DSL
        BUILD_FILE="android/app/build.gradle.kts"
        if [ -f "$BUILD_FILE" ]; then
          sed -i.bak -E "s/applicationId\s*=\s*\"[^\"]+\"/applicationId = \"$PKG_NAME\"/" "$BUILD_FILE"
          echo "‚úÖ Updated applicationId in Kotlin DSL"
        else
          echo "‚ö†Ô∏è build.gradle.kts not found. Skipping Android applicationId update."
        fi

        echo "‚úÖ Android package updated."

        echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ iOS UPDATE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
        echo "üçè Updating iOS bundle identifier..."

        IOS_PROJECT_FILE="ios/Runner.xcodeproj/project.pbxproj"
        if [ -f "$IOS_PROJECT_FILE" ]; then
          sed -i.bak "s/PRODUCT_BUNDLE_IDENTIFIER = .*;/PRODUCT_BUNDLE_IDENTIFIER = $PKG_NAME;/g" "$IOS_PROJECT_FILE"
          echo "‚úÖ iOS bundle identifier updated."
        else
          echo "‚ùå iOS project file not found at $IOS_PROJECT_FILE"
          exit 1
        fi


    - &build_ipa
      name: Building iOS App with Feature Flags
      script: |
        if [ ! -f signing_cert.p12 ] || [ ! -f profile.mobileprovision ]; then
        echo "‚ùå Error: Certificates or provisioning profile missing."
        exit 1
        fi

        echo "üîë Setting up provisioning profile for build..."
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

        echo "‚úÖ Building iOS IPA..."
        flutter build ipa \
        --release \
        --dart-define=WEB_URL="$WEB_URL" \
        --dart-define=PUSH_NOTIFY="$PUSH_NOTIFY" \
        --dart-define=PKG_NAME="$PKG_NAME" \
        --dart-define=APP_NAME="$APP_NAME" \
        --dart-define=ORG_NAME="$ORG_NAME" \
        --dart-define=VERSION_NAME="$VERSION_NAME" \
        --dart-define=VERSION_CODE="$VERSION_CODE" \
        --dart-define=EMAIL_ID="$EMAIL_ID" \
        --dart-define=IS_SPLASH="$IS_SPLASH" \
        --dart-define=SPLASH="$SPLASH" \
        --dart-define=SPLASH_BG="$SPLASH_BG" \
        --dart-define=SPLASH_ANIMATION="$SPLASH_ANIMATION" \
        --dart-define=SPLASH_BG_COLOR="$SPLASH_BG_COLOR" \
        --dart-define=SPLASH_TAGLINE="$SPLASH_TAGLINE" \
        --dart-define=SPLASH_TAGLINE_COLOR="$SPLASH_TAGLINE_COLOR" \
        --dart-define=SPLASH_DURATION="$SPLASH_DURATION" \
        --dart-define=IS_PULLDOWN="$IS_PULLDOWN" \
        --dart-define=LOGO_URL="$LOGO_URL" \
        --dart-define=IS_BOTTOMMENU="$IS_BOTTOMMENU" \
        --dart-define=BOTTOMMENU_ITEMS="$BOTTOMMENU_ITEMS" \
        --dart-define=BOTTOMMENU_BG_COLOR="$BOTTOMMENU_BG_COLOR" \
        --dart-define=BOTTOMMENU_ICON_COLOR="$BOTTOMMENU_ICON_COLOR" \
        --dart-define=BOTTOMMENU_TEXT_COLOR="$BOTTOMMENU_TEXT_COLOR" \
        --dart-define=BOTTOMMENU_FONT="$BOTTOMMENU_FONT" \
        --dart-define=BOTTOMMENU_FONT_SIZE="$BOTTOMMENU_FONT_SIZE" \
        --dart-define=BOTTOMMENU_FONT_BOLD="$BOTTOMMENU_FONT_BOLD" \
        --dart-define=BOTTOMMENU_FONT_ITALIC="$BOTTOMMENU_FONT_ITALIC" \
        --dart-define=BOTTOMMENU_ACTIVE_TAB_COLOR="$BOTTOMMENU_ACTIVE_TAB_COLOR" \
        --dart-define=BOTTOMMENU_ICON_POSITION="$BOTTOMMENU_ICON_POSITION" \
        --dart-define=BOTTOMMENU_VISIBLE_ON="$BOTTOMMENU_VISIBLE_ON" \
        --dart-define=IS_DEEPLINK="$IS_DEEPLINK" \
        --dart-define=IS_LOAD_IND="$IS_LOAD_IND" \
        --dart-define=IS_CAMERA="$IS_CAMERA" \
        --dart-define=IS_LOCATION="$IS_LOCATION" \
        --dart-define=IS_BIOMETRIC="$IS_BIOMETRIC" \
        --dart-define=IS_MIC="$IS_MIC" \
        --dart-define=IS_CONTACT="$IS_CONTACT" \
        --dart-define=IS_CALENDAR="$IS_CALENDAR" \
        --dart-define=IS_NOTIFICATION="$IS_NOTIFICATION" \
        --dart-define=IS_STORAGE="$IS_STORAGE" \
        --dart-define=APNS_KEY_ID="$APNS_KEY_ID" \
        --dart-define=APPLE_TEAM_ID="$APPLE_TEAM_ID" \
        --dart-define=APNS_AUTH_KEY_URL="$APNS_AUTH_KEY_URL" \
        --dart-define=KEY_STORE="$KEY_STORE" \
        --dart-define=CM_KEYSTORE_PASSWORD="$CM_KEYSTORE_PASSWORD" \
        --dart-define=CM_KEY_ALIAS="$CM_KEY_ALIAS" \
        --dart-define=CM_KEY_PASSWORD="$CM_KEY_PASSWORD" \
        --export-options-plist=ExportOptions.plist > flutter_build_ios.log

        echo "‚úÖ IPA build completed successfully."

        echo "üßπ Cleaning up certificates and profiles..."
        security delete-keychain build.keychain
        rm -rf ios_certificates
        rm -f ExportOptions.plist
        echo "‚úÖ Cleanup completed."
    - &build_apk
      name: Building Apk with Feature Flags
      script: |
        echo "üî¢ VERSION_NAME: $VERSION_NAME"
        echo "üî¢ VERSION_CODE: $VERSION_CODE"
         # Default values
        VERSION_NAME="${VERSION_NAME:-1.0.0}"
        VERSION_CODE="${VERSION_CODE:-100}"

        # Check if VERSION_NAME is empty or not set
        if [ -z "$VERSION_NAME" ]; then
          VERSION_NAME=$DEFAULT_VERSION_NAME
          echo "üî¢ Setting DEFAULT_VERSION_NAME"
        fi

        # Check if VERSION_CODE is empty or not set
        if [ -z "$VERSION_CODE" ]; then
          VERSION_CODE=$DEFAULT_VERSION_CODE
          echo "üî¢ Setting DEFAULT_VERSION_CODE"
        fi

        echo "üî¢ VERSION_NAME: $VERSION_NAME"
        echo "üî¢ VERSION_CODE: $VERSION_CODE"

        echo "üîß Ensuring valid version in pubspec.yaml: $VERSION_NAME+$VERSION_CODE"
        if grep -q "^version: " pubspec.yaml; then
          sed -i.bak -E "s/^version: .*/version: $VERSION_NAME+$VERSION_CODE/" pubspec.yaml
          else
        echo "version: $VERSION_NAME+$VERSION_CODE" >> pubspec.yaml
          fi

        flutter pub get
        if [ $? -ne 0 ]; then
        echo "‚ùå Failed to get Flutter dependencies"
        exit 1
        fi

        echo "‚úÖ Building APK..."
        flutter build apk \
            --release \
            --dart-define=WEB_URL="$WEB_URL" \
            --dart-define=PUSH_NOTIFY="$PUSH_NOTIFY" \
            --dart-define=PKG_NAME="$PKG_NAME" \
            --dart-define=APP_NAME="$APP_NAME" \
            --dart-define=ORG_NAME="$ORG_NAME" \
            --dart-define=VERSION_NAME="$VERSION_NAME" \
            --dart-define=VERSION_CODE="$VERSION_CODE" \
            --dart-define=EMAIL_ID="$EMAIL_ID" \
            --dart-define=IS_SPLASH="$IS_SPLASH" \
            --dart-define=SPLASH="$SPLASH" \
            --dart-define=SPLASH_BG="$SPLASH_BG" \
            --dart-define=SPLASH_ANIMATION="$SPLASH_ANIMATION" \
            --dart-define=SPLASH_BG_COLOR="$SPLASH_BG_COLOR" \
            --dart-define=SPLASH_TAGLINE="$SPLASH_TAGLINE" \
            --dart-define=SPLASH_TAGLINE_COLOR="$SPLASH_TAGLINE_COLOR" \
            --dart-define=SPLASH_DURATION="$SPLASH_DURATION" \
            --dart-define=IS_PULLDOWN="$IS_PULLDOWN" \
            --dart-define=LOGO_URL="$LOGO_URL" \
            --dart-define=IS_BOTTOMMENU="$IS_BOTTOMMENU" \
            --dart-define=BOTTOMMENU_ITEMS="$BOTTOMMENU_ITEMS" \
            --dart-define=BOTTOMMENU_BG_COLOR="$BOTTOMMENU_BG_COLOR" \
            --dart-define=BOTTOMMENU_ICON_COLOR="$BOTTOMMENU_ICON_COLOR" \
            --dart-define=BOTTOMMENU_TEXT_COLOR="$BOTTOMMENU_TEXT_COLOR" \
            --dart-define=BOTTOMMENU_FONT="$BOTTOMMENU_FONT" \
            --dart-define=BOTTOMMENU_FONT_SIZE="$BOTTOMMENU_FONT_SIZE" \
            --dart-define=BOTTOMMENU_FONT_BOLD="$BOTTOMMENU_FONT_BOLD" \
            --dart-define=BOTTOMMENU_FONT_ITALIC="$BOTTOMMENU_FONT_ITALIC" \
            --dart-define=BOTTOMMENU_ACTIVE_TAB_COLOR="$BOTTOMMENU_ACTIVE_TAB_COLOR" \
            --dart-define=BOTTOMMENU_ICON_POSITION="$BOTTOMMENU_ICON_POSITION" \
            --dart-define=BOTTOMMENU_VISIBLE_ON="$BOTTOMMENU_VISIBLE_ON" \
            --dart-define=IS_DEEPLINK="$IS_DEEPLINK" \
            --dart-define=IS_LOAD_IND="$IS_LOAD_IND" \
            --dart-define=IS_CAMERA="$IS_CAMERA" \
            --dart-define=IS_LOCATION="$IS_LOCATION" \
            --dart-define=IS_BIOMETRIC="$IS_BIOMETRIC" \
            --dart-define=IS_MIC="$IS_MIC" \
            --dart-define=IS_CONTACT="$IS_CONTACT" \
            --dart-define=IS_CALENDAR="$IS_CALENDAR" \
            --dart-define=IS_NOTIFICATION="$IS_NOTIFICATION" \
            --dart-define=IS_STORAGE="$IS_STORAGE" \
            --dart-define=firebase_config_android="$firebase_config_android" \
            --dart-define=firebase_config_ios="$firebase_config_ios" \
            --dart-define=APNS_KEY_ID="$APNS_KEY_ID" \
            --dart-define=APPLE_TEAM_ID="$APPLE_TEAM_ID" \
            --dart-define=APNS_AUTH_KEY_URL="$APNS_AUTH_KEY_URL" \
            --dart-define=KEY_STORE="$KEY_STORE" \
            --dart-define=CM_KEYSTORE_PASSWORD="$CM_KEYSTORE_PASSWORD" \
            --dart-define=CM_KEY_ALIAS="$CM_KEY_ALIAS" \
            --dart-define=CM_KEY_PASSWORD="$CM_KEY_PASSWORD" > flutter_build_apk.log
        if [ $? -ne 0 ]; then
        echo "‚ùå APK build failed"
        cat flutter_build.log
        exit 1
        fi
        echo "‚úÖ APK build completed."

    - &build_apk_release
      name: Building Apk with Feature Flags
      script: |
        
        
        echo "‚úÖ Building APK..."
        flutter build apk --release \
            --dart-define=WEB_URL="$WEB_URL" \
            --dart-define=PUSH_NOTIFY="$PUSH_NOTIFY" \
            --dart-define=PKG_NAME="$PKG_NAME" \
            --dart-define=APP_NAME="$APP_NAME" \
            --dart-define=ORG_NAME="$ORG_NAME" \
            --dart-define=VERSION_NAME="$VERSION_NAME" \
            --dart-define=VERSION_CODE="$VERSION_CODE" \
            --dart-define=EMAIL_ID="$EMAIL_ID" \
            --dart-define=IS_SPLASH="$IS_SPLASH" \
            --dart-define=SPLASH="$SPLASH" \
            --dart-define=SPLASH_BG="$SPLASH_BG" \
            --dart-define=SPLASH_ANIMATION="$SPLASH_ANIMATION" \
            --dart-define=SPLASH_BG_COLOR="$SPLASH_BG_COLOR" \
            --dart-define=SPLASH_TAGLINE="$SPLASH_TAGLINE" \
            --dart-define=SPLASH_TAGLINE_COLOR="$SPLASH_TAGLINE_COLOR" \
            --dart-define=SPLASH_DURATION="$SPLASH_DURATION" \
            --dart-define=IS_PULLDOWN="$IS_PULLDOWN" \
            --dart-define=LOGO_URL="$LOGO_URL" \
            --dart-define=IS_BOTTOMMENU="$IS_BOTTOMMENU" \
            --dart-define=BOTTOMMENU_ITEMS="$BOTTOMMENU_ITEMS" \
            --dart-define=BOTTOMMENU_BG_COLOR="$BOTTOMMENU_BG_COLOR" \
            --dart-define=BOTTOMMENU_ICON_COLOR="$BOTTOMMENU_ICON_COLOR" \
            --dart-define=BOTTOMMENU_TEXT_COLOR="$BOTTOMMENU_TEXT_COLOR" \
            --dart-define=BOTTOMMENU_FONT="$BOTTOMMENU_FONT" \
            --dart-define=BOTTOMMENU_FONT_SIZE="$BOTTOMMENU_FONT_SIZE" \
            --dart-define=BOTTOMMENU_FONT_BOLD="$BOTTOMMENU_FONT_BOLD" \
            --dart-define=BOTTOMMENU_FONT_ITALIC="$BOTTOMMENU_FONT_ITALIC" \
            --dart-define=BOTTOMMENU_ACTIVE_TAB_COLOR="$BOTTOMMENU_ACTIVE_TAB_COLOR" \
            --dart-define=BOTTOMMENU_ICON_POSITION="$BOTTOMMENU_ICON_POSITION" \
            --dart-define=BOTTOMMENU_VISIBLE_ON="$BOTTOMMENU_VISIBLE_ON" \
            --dart-define=IS_DEEPLINK="$IS_DEEPLINK" \
            --dart-define=IS_LOAD_IND="$IS_LOAD_IND" \
            --dart-define=IS_CHATBOT="$IS_CHATBOT" \
            --dart-define=IS_CAMERA="$IS_CAMERA" \
            --dart-define=IS_LOCATION="$IS_LOCATION" \
            --dart-define=IS_BIOMETRIC="$IS_BIOMETRIC" \
            --dart-define=IS_MIC="$IS_MIC" \
            --dart-define=IS_CONTACT="$IS_CONTACT" \
            --dart-define=IS_CALENDAR="$IS_CALENDAR" \
            --dart-define=IS_NOTIFICATION="$IS_NOTIFICATION" \
            --dart-define=IS_STORAGE="$IS_STORAGE" \
            --dart-define=firebase_config_android="$firebase_config_android" \
            --dart-define=firebase_config_ios="$firebase_config_ios" \
            --dart-define=APNS_KEY_ID="$APNS_KEY_ID" \
            --dart-define=APPLE_TEAM_ID="$APPLE_TEAM_ID" \
            --dart-define=APNS_AUTH_KEY_URL="$APNS_AUTH_KEY_URL" \
            --dart-define=KEY_STORE="$KEY_STORE" \
            --dart-define=CM_KEYSTORE_PASSWORD="$CM_KEYSTORE_PASSWORD" \
            --dart-define=CM_KEY_ALIAS="$CM_KEY_ALIAS" \
            --dart-define=CM_KEY_PASSWORD="$CM_KEY_PASSWORD" > flutter_build_apk.log
        if [ $? -ne 0 ]; then
        echo "‚ùå APK build failed"
        cat flutter_build.log
        exit 1
        fi
        echo "‚úÖ APK build completed."

        echo "‚úÖ Building AppBundle..."
        flutter build appbundle --release \
            --dart-define=WEB_URL="$WEB_URL" \
            --dart-define=PUSH_NOTIFY="$PUSH_NOTIFY" \
            --dart-define=PKG_NAME="$PKG_NAME" \
            --dart-define=APP_NAME="$APP_NAME" \
            --dart-define=ORG_NAME="$ORG_NAME" \
            --dart-define=VERSION_NAME="$VERSION_NAME" \
            --dart-define=VERSION_CODE="$VERSION_CODE" \
            --dart-define=EMAIL_ID="$EMAIL_ID" \
            --dart-define=IS_SPLASH="$IS_SPLASH" \
            --dart-define=SPLASH="$SPLASH" \
            --dart-define=SPLASH_BG="$SPLASH_BG" \
            --dart-define=SPLASH_ANIMATION="$SPLASH_ANIMATION" \
            --dart-define=SPLASH_BG_COLOR="$SPLASH_BG_COLOR" \
            --dart-define=SPLASH_TAGLINE="$SPLASH_TAGLINE" \
            --dart-define=SPLASH_TAGLINE_COLOR="$SPLASH_TAGLINE_COLOR" \
            --dart-define=SPLASH_DURATION="$SPLASH_DURATION" \
            --dart-define=IS_PULLDOWN="$IS_PULLDOWN" \
            --dart-define=LOGO_URL="$LOGO_URL" \
            --dart-define=IS_BOTTOMMENU="$IS_BOTTOMMENU" \
            --dart-define=BOTTOMMENU_ITEMS="$BOTTOMMENU_ITEMS" \
            --dart-define=BOTTOMMENU_BG_COLOR="$BOTTOMMENU_BG_COLOR" \
            --dart-define=BOTTOMMENU_ICON_COLOR="$BOTTOMMENU_ICON_COLOR" \
            --dart-define=BOTTOMMENU_TEXT_COLOR="$BOTTOMMENU_TEXT_COLOR" \
            --dart-define=BOTTOMMENU_FONT="$BOTTOMMENU_FONT" \
            --dart-define=BOTTOMMENU_FONT_SIZE="$BOTTOMMENU_FONT_SIZE" \
            --dart-define=BOTTOMMENU_FONT_BOLD="$BOTTOMMENU_FONT_BOLD" \
            --dart-define=BOTTOMMENU_FONT_ITALIC="$BOTTOMMENU_FONT_ITALIC" \
            --dart-define=BOTTOMMENU_ACTIVE_TAB_COLOR="$BOTTOMMENU_ACTIVE_TAB_COLOR" \
            --dart-define=BOTTOMMENU_ICON_POSITION="$BOTTOMMENU_ICON_POSITION" \
            --dart-define=BOTTOMMENU_VISIBLE_ON="$BOTTOMMENU_VISIBLE_ON" \
            --dart-define=IS_DEEPLINK="$IS_DEEPLINK" \
            --dart-define=IS_LOAD_IND="$IS_LOAD_IND" \
            --dart-define=IS_CHATBOT="$IS_CHATBOT" \
            --dart-define=IS_CAMERA="$IS_CAMERA" \
            --dart-define=IS_LOCATION="$IS_LOCATION" \
            --dart-define=IS_BIOMETRIC="$IS_BIOMETRIC" \
            --dart-define=IS_MIC="$IS_MIC" \
            --dart-define=IS_CONTACT="$IS_CONTACT" \
            --dart-define=IS_CALENDAR="$IS_CALENDAR" \
            --dart-define=IS_NOTIFICATION="$IS_NOTIFICATION" \
            --dart-define=IS_STORAGE="$IS_STORAGE" \
            --dart-define=firebase_config_android="$firebase_config_android" \
            --dart-define=firebase_config_ios="$firebase_config_ios" \
            --dart-define=APNS_KEY_ID="$APNS_KEY_ID" \
            --dart-define=APPLE_TEAM_ID="$APPLE_TEAM_ID" \
            --dart-define=APNS_AUTH_KEY_URL="$APNS_AUTH_KEY_URL" \
            --dart-define=KEY_STORE="$KEY_STORE" \
            --dart-define=CM_KEYSTORE_PASSWORD="$CM_KEYSTORE_PASSWORD" \
            --dart-define=CM_KEY_ALIAS="$CM_KEY_ALIAS" \
            --dart-define=CM_KEY_PASSWORD="$CM_KEY_PASSWORD" > flutter_build_aab.log
        if [ $? -ne 0 ]; then
        echo "‚ùå AppBundle build failed"
        cat flutter_build2.log
        exit 1
        fi
        echo "‚úÖ AppBundle build completed."

    - &key_store
      name: Setup Android keystore and insert Gradle signing block (KTS)
      script: |
        echo "üì¶ Setting up Android signing configuration..."
        
        # Validate keystore environment variables
        if [ -z "$KEY_STORE" ] || [ -z "$CM_KEYSTORE_PASSWORD" ] || [ -z "$CM_KEY_ALIAS" ] || [ -z "$CM_KEY_PASSWORD" ]; then
          echo "‚ùå Missing required keystore environment variables"
          echo "Required variables:"
          echo "- KEY_STORE: URL to download keystore"
          echo "- CM_KEYSTORE_PASSWORD: Keystore password"
          echo "- CM_KEY_ALIAS: Key alias"
          echo "- CM_KEY_PASSWORD: Key password"
          exit 1
        fi
        
        # Create android directory if it doesn't exist
        mkdir -p android/app
        
        echo "üì• Downloading keystore..."
        # Download with retry logic
        max_attempts=3
        attempt=1
        while [ $attempt -le $max_attempts ]; do
          if curl -f -o android/app/keystore.jks "$KEY_STORE"; then
            echo "‚úÖ Keystore downloaded successfully"
            break
          else
            echo "‚ùå Attempt $attempt failed to download keystore"
            if [ $attempt -eq $max_attempts ]; then
              echo "‚ùå Failed to download keystore after $max_attempts attempts"
              exit 1
            fi
            attempt=$((attempt + 1))
            sleep 5
          fi
        done
        
        echo "üìù Writing key.properties..."
        cat > android/key.properties <<EOF
        storeFile=keystore.jks
        storePassword=$CM_KEYSTORE_PASSWORD
        keyAlias=$CM_KEY_ALIAS
        keyPassword=$CM_KEY_PASSWORD
        EOF
        
        echo "üîê Configuring Gradle signing..."
        
        GRADLE_FILE="android/app/build.gradle.kts"
        
        # Add keystoreProperties block at the top if not present
        if ! grep -q 'val keystoreProperties' "$GRADLE_FILE"; then
          echo "üîß Adding keystoreProperties block..."
          sed -i '1s;^;val keystoreProperties = Properties().apply {\n    load(File(rootProject.rootDir, "android/key.properties").inputStream())\n}\n\n;' "$GRADLE_FILE"
        else
          echo "‚úÖ keystoreProperties block already present"
        fi
        
        # Inject signingConfigs inside android { ... }
        if ! grep -q 'signingConfigs' "$GRADLE_FILE"; then
          echo "üîß Injecting signingConfigs block..."
          awk '/android\s*{/{print; print "    signingConfigs {\n        create(\"release\") {\n            storeFile = file(\"keystore.jks\")\n            storePassword = keystoreProperties[\"storePassword\"] as String\n            keyAlias = keystoreProperties[\"keyAlias\"] as String\n            keyPassword = keystoreProperties[\"keyPassword\"] as String\n            enableV1Signing = true\n            enableV2Signing = true\n            enableV3Signing = true\n        }\n    }"; next}1' "$GRADLE_FILE" > tmp && mv tmp "$GRADLE_FILE"
        else
          echo "‚úÖ signingConfigs already exists"
        fi
        
        # Inject release buildType with proper configuration
        if grep -q "buildTypes" "$GRADLE_FILE"; then
          if ! grep -q "signingConfig = signingConfigs.getByName(\"release\")" "$GRADLE_FILE"; then
            echo "üîß Updating release buildType configuration..."
            awk '/buildTypes\s*{/{print; print "        getByName(\"release\") {\n            isMinifyEnabled = true\n            isShrinkResources = true\n            signingConfig = signingConfigs.getByName(\"release\")\n            proguardFiles(getDefaultProguardFile(\"proguard-android-optimize.txt\"), \"proguard-rules.pro\")\n        }"; next}1' "$GRADLE_FILE" > tmp && mv tmp "$GRADLE_FILE"
          else
            echo "‚úÖ Release signing configuration already present"
          fi
        else
          echo "‚ùå buildTypes block not found in $GRADLE_FILE"
          exit 1
        fi
        
        echo "‚úÖ Android signing configuration completed"
        
        # Verify the configuration
        echo "üîç Verifying signing configuration..."
        if [ -f "android/app/keystore.jks" ] && [ -f "android/key.properties" ]; then
          echo "‚úÖ Signing files present and configured"
        else
          echo "‚ùå Signing configuration verification failed"
          exit 1
        fi
    - &Setup_IOS
      name: Setting Up IOS Build
      script: |
        echo "üîê Setting up iOS code signing..."

        export LC_ALL=en_US.UTF-8
        export LANG=en_US.UTF-8

        KEYCHAIN_PASSWORD="temp_key_pass"
        KEYCHAIN_NAME="ios-signing.keychain"

        # Download and import certificate
        echo "üì• Downloading certificate..."
        curl -o signing_cert.p12 "$CERT_URL"

        echo "üîê Creating temporary keychain..."
        security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
        security default-keychain -s "$KEYCHAIN_NAME"
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
        security set-keychain-settings -t 3600 -u "$KEYCHAIN_NAME"

        # Import the certificate to the keychain
        echo "üîë Importing certificate..."
        security import signing_cert.p12 -k "$KEYCHAIN_NAME" -P "$CERT_PASSWORD" -T /usr/bin/codesign

        # Trust the keychain for signing tools
        echo "‚úÖ Trusting keychain for code signing..."
        security list-keychains -s "$KEYCHAIN_NAME"
        security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"

        # Extract CODE_SIGN_IDENTITY
        echo "üîç Extracting code signing identity from keychain..."
        CODE_SIGN_IDENTITY=$(security find-identity -v -p codesigning "$KEYCHAIN_NAME" | grep -o '".*"' | head -n 1 | tr -d '"')
        echo "‚úÖ CODE_SIGN_IDENTITY: $CODE_SIGN_IDENTITY"
        if [ -z "$CODE_SIGN_IDENTITY" ]; then
        echo "‚ùå Failed to extract CODE_SIGN_IDENTITY"
        exit 1
        fi

        # Download provisioning profile
        echo "üì• Downloading provisioning profile..."
        curl -o profile.mobileprovision "$PROFILE_URL"

        # Extract UUID of the provisioning profile
        UUID=$(/usr/libexec/PlistBuddy -c "Print UUID" /dev/stdin <<< "$(security cms -D -i profile.mobileprovision)")
        echo "‚úÖ Provisioning Profile UUID: $UUID"

        PROFILE_PATH=~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp profile.mobileprovision "$PROFILE_PATH"

        # Update iOS deployment target
        echo "üîß Updating iOS deployment target to 13.0 in Podfile..."
        sed -i '' 's/platform :ios, .*/platform :ios, "13.0"/' ios/Podfile

        # CocoaPods setup
        echo "üõ†Ô∏è Setting up CocoaPods and Flutter dependencies..."
        flutter clean
        rm -rf ios/Pods ios/Podfile.lock ~/Library/Caches/CocoaPods ~/.cocoapods/repos

        set -x
        gem install cocoapods --pre --silent
        gem install securerandom -v 0.3.2 --silent
        pod install --project-directory=ios
        flutter pub get
        set +x

        # Build Flutter iOS app (no code signing)
        flutter build ios --release --no-codesign

        # Archive app with manual signing
        echo "üì¶ Archiving app with code signing..."
        xcodebuild -workspace ios/Runner.xcworkspace \
        -scheme Runner \
        -configuration Release \
        -sdk iphoneos \
        -destination "generic/platform=iOS" \
        -archivePath build/ios/archive/Runner.xcarchive \
        CODE_SIGN_STYLE=Manual \
        DEVELOPMENT_TEAM="$APPLE_TEAM_ID" \
        PROVISIONING_PROFILE_SPECIFIER="$UUID" \
        PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
        CODE_SIGN_IDENTITY="$CODE_SIGN_IDENTITY" \
        OTHER_CODE_SIGN_FLAGS="--keychain ~/Library/Keychains/$KEYCHAIN_NAME-db" \
        archive

        # Create ExportOptions.plist
        cat <<EOF > ExportOptions.plist
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
        <key>method</key>
        <string>ad-hoc</string>
        <key>provisioningProfiles</key>
        <dict>
        <key>$BUNDLE_ID</key>
        <string>$UUID</string>
        </dict>
        <key>signingStyle</key>
        <string>manual</string>
        <key>teamID</key>
        <string>$APPLE_TEAM_ID</string>
        </dict>
        </plist>
        EOF

        # Export IPA
        echo "üì¶ Exporting IPA..."
        xcodebuild -exportArchive \
        -archivePath build/ios/archive/Runner.xcarchive \
        -exportPath build/ios/ipa \
        -exportOptionsPlist ExportOptions.plist \
        -allowProvisioningUpdates

        echo "‚úÖ IPA export complete: build/ios/ipa"

        # Cleanup
        echo "üßπ Cleaning up..."
        security delete-keychain "$KEYCHAIN_NAME"
        rm -f signing_cert.p12 profile.mobileprovision ExportOptions.plist

        echo "üéâ Done!"

    - &setup_ios_signing_manual
      name: Setting Up iOS Signing (Manual)
      script: |
        echo "üîê Setting up iOS code signing..."
        export LC_ALL=en_US.UTF-8
        export LANG=en_US.UTF-8

        KEYCHAIN_PASSWORD="temp_key_pass"
        KEYCHAIN_NAME="ios-signing.keychain"

        # Download and import certificate
        echo "üì• Downloading certificate..."
        curl -o signing_cert.p12 "$CERT_URL"

        echo "üîê Creating temporary keychain..."
        security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
        security default-keychain -s "$KEYCHAIN_NAME"
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
        security set-keychain-settings -t 3600 -u "$KEYCHAIN_NAME"

        # Import the certificate to the keychain
        echo "üîë Importing certificate..."
        security import signing_cert.p12 -k "$KEYCHAIN_NAME" -P "$CERT_PASSWORD" -T /usr/bin/codesign

        echo "üîç Verifying imported certificate..."
        security find-identity -v -p codesigning "$KEYCHAIN_NAME"

        # Download provisioning profile
        echo "üì• Downloading provisioning profile..."
        curl -o profile.mobileprovision "$PROFILE_URL"

        # Get the UUID of the provisioning profile
        UUID=$(/usr/libexec/PlistBuddy -c "Print UUID" /dev/stdin <<< $(security cms -D -i profile.mobileprovision))
        echo "‚úÖ Profile UUID: $UUID"

        PROFILE_PATH=~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp profile.mobileprovision "$PROFILE_PATH"

        # Set the keychain to be trusted for code signing
        echo "‚úÖ Trusting keychain for code signing..."
        security list-keychains -s "$KEYCHAIN_NAME"
        security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
        security find-identity -v -p codesigning

        echo "üîß Updating iOS deployment target to 13.0 in Podfile..."
        sed -i '' 's/platform :ios, .*/platform :ios, "13.0"/' ios/Podfile
        cat ios/Podfile | grep platform

          # Flutter build
          echo "‚öôÔ∏è Building Flutter iOS project..."
          flutter build ios --release --no-codesign \
          --dart-define=WEB_URL="$WEB_URL" \
          --dart-define=PUSH_NOTIFY="$PUSH_NOTIFY" \
          --dart-define=PKG_NAME="$PKG_NAME" \
          --dart-define=APP_NAME="$APP_NAME" \
          --dart-define=ORG_NAME="$ORG_NAME" \
          --dart-define=VERSION_NAME="$VERSION_NAME" \
          --dart-define=VERSION_CODE="$VERSION_CODE" \
          --dart-define=EMAIL_ID="$EMAIL_ID" \
          --dart-define=IS_SPLASH="$IS_SPLASH" \
          --dart-define=SPLASH="$SPLASH" \
          --dart-define=SPLASH_BG="$SPLASH_BG" \
          --dart-define=SPLASH_ANIMATION="$SPLASH_ANIMATION" \
          --dart-define=SPLASH_BG_COLOR="$SPLASH_BG_COLOR" \
          --dart-define=SPLASH_TAGLINE="$SPLASH_TAGLINE" \
          --dart-define=SPLASH_TAGLINE_COLOR="$SPLASH_TAGLINE_COLOR" \
          --dart-define=SPLASH_DURATION="$SPLASH_DURATION" \
          --dart-define=IS_PULLDOWN="$IS_PULLDOWN" \
          --dart-define=LOGO_URL="$LOGO_URL" \
          --dart-define=IS_BOTTOMMENU="$IS_BOTTOMMENU" \
          --dart-define=BOTTOMMENU_ITEMS="$BOTTOMMENU_ITEMS" \
          --dart-define=BOTTOMMENU_BG_COLOR="$BOTTOMMENU_BG_COLOR" \
          --dart-define=BOTTOMMENU_ICON_COLOR="$BOTTOMMENU_ICON_COLOR" \
          --dart-define=BOTTOMMENU_TEXT_COLOR="$BOTTOMMENU_TEXT_COLOR" \
          --dart-define=BOTTOMMENU_FONT="$BOTTOMMENU_FONT" \
          --dart-define=BOTTOMMENU_FONT_SIZE="$BOTTOMMENU_FONT_SIZE" \
          --dart-define=BOTTOMMENU_FONT_BOLD="$BOTTOMMENU_FONT_BOLD" \
          --dart-define=BOTTOMMENU_FONT_ITALIC="$BOTTOMMENU_FONT_ITALIC" \
          --dart-define=BOTTOMMENU_ACTIVE_TAB_COLOR="$BOTTOMMENU_ACTIVE_TAB_COLOR" \
          --dart-define=BOTTOMMENU_ICON_POSITION="$BOTTOMMENU_ICON_POSITION" \
          --dart-define=BOTTOMMENU_VISIBLE_ON="$BOTTOMMENU_VISIBLE_ON" \
          --dart-define=IS_DEEPLINK="$IS_DEEPLINK" \
          --dart-define=IS_LOAD_IND="$IS_LOAD_IND" \
          --dart-define=IS_CAMERA="$IS_CAMERA" \
          --dart-define=IS_LOCATION="$IS_LOCATION" \
          --dart-define=IS_BIOMETRIC="$IS_BIOMETRIC" \
          --dart-define=IS_MIC="$IS_MIC" \
          --dart-define=IS_CONTACT="$IS_CONTACT" \
          --dart-define=IS_CALENDAR="$IS_CALENDAR" \
          --dart-define=IS_NOTIFICATION="$IS_NOTIFICATION" \
          --dart-define=IS_STORAGE="$IS_STORAGE" \
          --dart-define=APNS_KEY_ID="$APNS_KEY_ID" \
          --dart-define=APPLE_TEAM_ID="$APPLE_TEAM_ID" \
          --dart-define=APNS_AUTH_KEY_URL="$APNS_AUTH_KEY_URL" \
          --dart-define=KEY_STORE="$KEY_STORE" \
          --dart-define=CM_KEYSTORE_PASSWORD="$CM_KEYSTORE_PASSWORD" \
          --dart-define=CM_KEY_ALIAS="$CM_KEY_ALIAS" \
          --dart-define=CM_KEY_PASSWORD="$CM_KEY_PASSWORD"
        
          # Extract CODE_SIGN_IDENTITY from the .p12 file
          security import signing_cert.p12 -k "$KEYCHAIN_NAME" -P "$CERT_PASSWORD" -T /usr/bin/codesign
          CODE_SIGN_IDENTITY=$(security find-identity -v -p codesigning "$KEYCHAIN_NAME" | awk '{print $2}' | head -n 1)
          echo "CODE_SIGN_IDENTITY=$CODE_SIGN_IDENTITY"
        
          echo "üõ†Ô∏è Setting UTF-8 encoding for CocoaPods..."
          export LANG=en_US.UTF-8
          export LC_ALL=en_US.UTF-8
          flutter clean
          rm -rf ios/Pods ios/Podfile.lock ~/Library/Caches/CocoaPods ~/.cocoapods/repos
          sudo gem install cocoapods
          cd ios
          pod reintegrate
          pod install --repo-update
          cd ..
          flutter pub get
        
           # Archive the app
            echo "üì¶ Archiving app with CodeSigning the IPA File..."
            xcodebuild -workspace ios/Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -archivePath build/ios/archive/Runner.xcarchive \
            archive \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM="$APPLE_TEAM_ID" \
            PROVISIONING_PROFILE_SPECIFIER="$UUID" \
            PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
            CODE_SIGN_IDENTITY="$CODE_SIGN_IDENTITY"

            # ExportOptions.plist
            cat <<EOF > ExportOptions.plist
            <?xml version="1.0" encoding="UTF-8"?>
            <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
            <plist version="1.0">
            <dict>
            <key>method</key>
            <string>ad-hoc</string>
            <key>provisioningProfiles</key>
            <dict>
            <key>$BUNDLE_ID</key>
            <string>$UUID</string>
            </dict>
            <key>signingStyle</key>
            <string>manual</string>
            <key>teamID</key>
            <string>$APPLE_TEAM_ID</string>
            </dict>
            </plist>
            EOF

            # Export the IPA
            echo "üì¶ Exporting IPA..."
            xcodebuild -exportArchive \
            -archivePath build/ios/archive/Runner.xcarchive \
            -exportPath build/ios/ipa \
            -exportOptionsPlist ExportOptions.plist \
            -allowProvisioningUpdates

            echo "‚úÖ IPA export complete: build/ios/ipa"
            security delete-keychain "$KEYCHAIN_NAME"
            rm signing_cert.p12 profile.mobileprovision

    - &setup_ios_signing_manual3
      name: Setting Up iOS Signing (Manual)
      script: |
        echo "üîê Setting up iOS signing (manual)..."

        mkdir -p ios_certificates

        echo "‚¨áÔ∏è Downloading .p12 certificate..."
        if [ -z "$CERT_URL" ]; then
        echo "‚ùå CERT_URL is not set."
        exit 1
        fi
        curl -f -o ios_certificates/certificate.p12 "$CERT_URL"
        echo "‚úÖ .p12 certificate downloaded successfully."

        echo "‚¨áÔ∏è Downloading provisioning profile..."
        if [ -z "$PROFILE_URL" ]; then
        echo "‚ùå PROFILE_URL is not set."
        exit 1
        fi
        curl -f -o ios_certificates/profile.mobileprovision "$PROFILE_URL"
        echo "‚úÖ Provisioning profile downloaded successfully."

        echo "üîê Creating and unlocking custom keychain..."
        security create-keychain -p "" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "" build.keychain
        security set-keychain-settings -lut 21600 build.keychain

        echo "üîê Importing certificate into custom keychain..."
        security import ios_certificates/certificate.p12 -k build.keychain -P "$CERT_PASSWORD" -A -T /usr/bin/codesign -T /usr/bin/security
        security set-key-partition-list -S apple-tool:,apple:,codesign -s -k "" build.keychain
        security list-keychains -s build.keychain
        echo "‚úÖ Certificate imported and trusted for code signing."

        echo "üìã Extracting UUID and Name from provisioning profile..."
        security cms -D -i ios_certificates/profile.mobileprovision -o ios_certificates/profile.plist

        PROFILE_UUID=$(/usr/libexec/PlistBuddy -c "Print UUID" ios_certificates/profile.plist)
        PROFILE_NAME=$(/usr/libexec/PlistBuddy -c "Print Name" ios_certificates/profile.plist)

        if [ -z "$PROFILE_UUID" ] || [ -z "$PROFILE_NAME" ]; then
        echo "‚ùå Failed to extract UUID or Name from provisioning profile."
        exit 1
        fi

        echo "‚úÖ Profile UUID: $PROFILE_UUID"
        echo "‚úÖ Profile Name: $PROFILE_NAME"

        echo "üîç Validating provisioning profile matches app bundle ID..."

        PROFILE_APP_ID_PREFIX=$(/usr/libexec/PlistBuddy -c "Print :Entitlements:application-identifier" ios_certificates/profile.plist)
        EXPECTED_APP_ID="$APPLE_TEAM_ID.$PKG_NAME"

        if [[ "$PROFILE_APP_ID_PREFIX" != "$EXPECTED_APP_ID" ]]; then
        echo "‚ùå Provisioning profile's App ID ($PROFILE_APP_ID_PREFIX) does not match expected ($EXPECTED_APP_ID)"
        exit 1
        else
        echo "‚úÖ Provisioning profile matches expected bundle ID: $PKG_NAME"
        fi

        echo "üîç Verifying imported code signing identities..."
        security find-identity -v -p codesigning build.keychain

        # Match iPhone Distribution instead of Apple Distribution
        VALID_IDENTITY=$(security find-identity -v -p codesigning build.keychain | grep "iPhone Distribution" | awk '{print $2}')

        if [ -z "$VALID_IDENTITY" ]; then
        echo "‚ùå No valid iPhone Distribution certificate found in the keychain."
        exit 1
        else
        echo "‚úÖ Found valid iPhone Distribution certificate: $VALID_IDENTITY"
        fi
        
          echo "üìù Creating ExportOptions.plist..."
          cat > ExportOptions.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
          <key>method</key>
          <string>ad-hoc</string>
          <key>signingStyle</key>
          <string>manual</string>
          <key>provisioningProfiles</key>
          <dict>
          <key>$PKG_NAME</key>
          <string>$PROFILE_NAME</string>
          </dict>
          <key>teamID</key>
          <string>$APPLE_TEAM_ID</string>
          </dict>
          </plist>
          EOF
        
          echo "‚úÖ ExportOptions.plist created."

    - &Inject_iOS_Firebase_Push
      name: Setup iOS Firebase push notifications and APNs key
      script: |
        echo "üì¶ Setting up iOS Firebase Push Notifications..."

        if [[ -n "$firebase_config_ios" ]]; then
          echo "üîó Firebase Config URL: $firebase_config_ios"

          if [[ "$firebase_config_ios" =~ ^https:// ]]; then
        
          echo "‚¨áÔ∏è Downloading GoogleService-Info.plist with retry..."
        
          for i in {1..5}; do
          wget -O ios/Runner/GoogleService-Info.plist "$firebase_config_ios" && break
          echo "‚ùå Download failed, retrying in $((2 ** i))s..."
          sleep $((2 ** i))
          done
        
          if [ ! -f ios/Runner/GoogleService-Info.plist ]; then
          echo "‚ùå Failed to download GoogleService-Info.plist after retries"
          exit 1
          fi
        
        
        #            echo "‚¨áÔ∏è Downloading GoogleService-Info.plist..."
        #            wget -O ios/Runner/GoogleService-Info.plist "$firebase_config_ios"
        #            if [ $? -eq 0 ]; then
        #              echo "‚úÖ GoogleService-Info.plist placed in ios/Runner"
        #            else
        #              echo "‚ùå Failed to download GoogleService-Info.plist"
        #              exit 1
        #            fi
          else
            echo "‚ùå Error: Invalid URL format for firebase_config_ios"
            exit 1
          fi
        else
          echo "‚ö†Ô∏è GOOGLE_SERVICE_INFO_PLIST_URL not set, skipping plist injection"
        fi

        if [[ -n "$APNS_AUTH_KEY_URL" && -n "$APNS_KEY_ID" && -n "$APPLE_TEAM_ID" ]]; then
          echo "‚¨áÔ∏è Downloading APNs Auth Key (.p8)..."
          wget -O ios/AuthKey.p8 "$APNS_AUTH_KEY_URL"
          if [ $? -eq 0 ]; then
            echo "‚úÖ APNs Auth Key downloaded to ios/AuthKey.p8"
          else
            echo "‚ùå Failed to download APNs key"
            exit 1
          fi

          echo "üìù APNs Setup:"
          echo "  üîë Key ID: $APNS_KEY_ID"
          echo "  üßë‚Äçüíª Team ID: $APPLE_TEAM_ID"
          echo "  üì¶ File: ios/AuthKey.p8"
        else
          echo "‚ö†Ô∏è Missing APNs credentials, skipping .p8 key setup"
        fi
    - &Update_App_Version22
      name: Inject Version Info into pubspec, build.gradle (Android) & Xcode project (iOS)
      script: |
        # Default values
        VERSION_NAME="${VERSION_NAME:-1.0.0}"
        VERSION_CODE="${VERSION_CODE:-100}"
        # Check if VERSION_NAME is empty or not set
         if [ -z "$VERSION_NAME" ]; then
           VERSION_NAME=$DEFAULT_VERSION_NAME
           echo "üî¢ Setting DEFAULT_VERSION_NAME"
         fi
        
         # Check if VERSION_CODE is empty or not set
         if [ -z "$VERSION_CODE" ]; then
           VERSION_CODE=$DEFAULT_VERSION_CODE
           echo "üî¢ Setting DEFAULT_VERSION_CODE"
         fi
        
         echo "üî¢ VERSION_NAME: $VERSION_NAME"
         echo "üî¢ VERSION_CODE: $VERSION_CODE"
        echo "üîÑ Updating version to ${VERSION_NAME}+${VERSION_CODE}"
        
        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ pubspec.yaml ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        sed -i'' -e "s/^version: .*/version: ${VERSION_NAME}+${VERSION_CODE}/" pubspec.yaml
        echo "‚úÖ Updated pubspec.yaml"
        
        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Android build.gradle ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        echo "üîß Updating Android build.gradle..."
        sed -i'' -e "s/versionCode.*/versionCode ${VERSION_CODE}/" android/app/build.gradle
        sed -i'' -e "s/versionName \".*\"/versionName \"${VERSION_NAME}\"/" android/app/build.gradle
        echo "‚úÖ Android version updated: $VERSION_NAME ($VERSION_CODE)"
        
        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ iOS: project.pbxproj ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        echo "üçè Updating iOS version info in project.pbxproj..."
        IOS_PROJECT_FILE="ios/Runner.xcodeproj/project.pbxproj"
        
        if [ -f "$IOS_PROJECT_FILE" ]; then
          sed -i'' -e "s/MARKETING_VERSION = .*;/MARKETING_VERSION = ${VERSION_NAME};/" "$IOS_PROJECT_FILE"
          sed -i'' -e "s/CURRENT_PROJECT_VERSION = .*;/CURRENT_PROJECT_VERSION = ${VERSION_CODE};/" "$IOS_PROJECT_FILE"
          echo "‚úÖ iOS version updated: $VERSION_NAME ($VERSION_CODE)"
        else
          echo "‚ùå iOS project file not found at $IOS_PROJECT_FILE"
          exit 1
        fi

    - &Update_App_Version
      name: Update Version Info (Android & iOS)
      script: |
        # Generate dynamic version code using timestamp (or use default)
        VERSION_NAME="${VERSION_NAME:-1.0.0}"
        VERSION_CODE="${VERSION_CODE:-$(date +%Y%m%d%H%M)}"

        echo "üî¢ VERSION_NAME: $VERSION_NAME"
        echo "üî¢ VERSION_CODE: $VERSION_CODE"

        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ pubspec.yaml ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        echo "üîß Updating pubspec.yaml..."
        if grep -q "^version: " pubspec.yaml; then
          sed -i'' -e "s/^version: .*/version: ${VERSION_NAME}+${VERSION_CODE}/" pubspec.yaml
        else
          echo "version: ${VERSION_NAME}+${VERSION_CODE}" >> pubspec.yaml
        fi
        echo "‚úÖ pubspec.yaml version updated."

        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Android (Kotlin DSL) build.gradle.kts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        BUILD_FILE="android/app/build.gradle.kts"
        if [ -f "$BUILD_FILE" ]; then
          echo "üîß Updating Android version in build.gradle.kts..."
          sed -i'' -E "s/versionCode\s*=\s*[0-9]+/versionCode = ${VERSION_CODE}/" "$BUILD_FILE"
          sed -i'' -E "s/versionName\s*=\s*\"[^\"]+\"/versionName = \"${VERSION_NAME}\"/" "$BUILD_FILE"
          echo "‚úÖ Android version updated in build.gradle.kts"
        else
          echo "‚ùå build.gradle.kts not found at $BUILD_FILE"
          exit 1
        fi

        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ iOS project.pbxproj ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        IOS_PROJECT_FILE="ios/Runner.xcodeproj/project.pbxproj"
        if [ -f "$IOS_PROJECT_FILE" ]; then
          echo "üîß Updating iOS version in project.pbxproj..."
          sed -i'' -e "s/MARKETING_VERSION = .*;/MARKETING_VERSION = ${VERSION_NAME};/" "$IOS_PROJECT_FILE"
          sed -i'' -e "s/CURRENT_PROJECT_VERSION = .*;/CURRENT_PROJECT_VERSION = ${VERSION_CODE};/" "$IOS_PROJECT_FILE"
          echo "‚úÖ iOS version updated in project.pbxproj"
        else
          echo "‚ùå iOS project file not found at $IOS_PROJECT_FILE"
          exit 1
        fi


workflows:
  apk-workflow:
    name: Android Workflow Free & Paid APK
    max_build_duration: 30
    instance_type: mac_mini_m1
    environment:
      flutter: stable
    scripts:
      - *change_proj_name
      - *debug_env
      - *update_package_names
      - *change_app_name
      - *Update_SDK_Version
      - *Update_App_Version
      - *get_logo
      - *set_launcher_icons
      - *get_splash
      - *build_apk
    artifacts:
      - *android_apk
      - flutter_build_apk.log
    publishing: *email_release

  android-workflow:
    name: Android Workflow
    max_build_duration: 60
    instance_type: mac_mini_m1
    environment:
      flutter: stable
      java: 17
    scripts:
      - name: Uninstall existing app
        script: |
          echo "üóëÔ∏è Uninstalling existing app if present..."
          adb devices | grep -v "List" | while read -r line; do
            if [ ! -z "$line" ]; then
              device_id=$(echo $line | cut -f1)
              echo "üì± Uninstalling from device: $device_id"
              adb -s $device_id uninstall "$PKG_NAME" || true
            fi
          done
          echo "‚úÖ Uninstall step completed"
      - *debug_env
      - *change_proj_name
      - *update_package_names
      - *change_app_name
      - *Update_SDK_Version
      - *Update_App_Version
      - *key_store
      - *get_json
      - *Inject_Firebase_Services
      - *get_logo
      - *get_splash
      - *set_launcher_icons
      - *build_apk_release
    artifacts:
      - build/**/outputs/apk/**/*.apk
      - build/**/outputs/bundle/**/*.aab
      #      - build/**/outputs/mapping/release/mapping.txt
      - flutter_drive.log
    publishing:
      email:
        recipients:
          - $EMAIL_ID
        notify:
          success: true
          failure: true

  ios-workflow:
    name: iOS Workflow
    instance_type: mac_mini_m1
    max_build_duration: 120
    environment:
      xcode: latest
      cocoapods: default
      flutter: stable
      vars:
        XCODE_WORKSPACE: "ios/Runner.xcworkspace"
        XCODE_SCHEME: "Runner"
        BUNDLE_ID: $BUNDLE_ID
        APPLE_TEAM_ID: $APPLE_TEAM_ID
        CERT_CER_URL: $CERT_CER_URL  # URL to download the .cer certificate file
        CERT_KEY_URL: $CERT_KEY_URL  # URL to download the private key file
        CERT_PASSWORD: $CERT_PASSWORD  # Password for the certificate
        PROFILE_URL: $PROFILE_URL  # URL to download the provisioning profile
    scripts:
        - name: Create build directory and set paths
          script: |
              set -euo pipefail
              trap 'echo "‚ùå Error on line $LINENO"' ERR
              
              # Set these variables (already in environment, but good to reference)
              # export BUNDLE_ID="..."
              # export CERT_PASSWORD="..." # Handled via secure env var
              # export PROFILE_URL="..."
              # export APPLE_TEAM_ID="..."
              # export CER_URL="..."
              # export KEY_URL="..."
              
              # Keychain variables
              export KEYCHAIN_NAME="ios-build.keychain"
              # KEYCHAIN_PASSWORD handled via secure env var
              export CM_BUILD_DIR="$(pwd)/build"
              export PROFILE_PLIST_PATH="$CM_BUILD_DIR/profile.plist"
              
              # Define paths for downloaded/generated files
              export CERT_CER_PATH="$CM_BUILD_DIR/certificate.cer"
              export PRIVATE_KEY_PATH="$CM_BUILD_DIR/private.key"
              export GENERATED_P12_PATH="$CM_BUILD_DIR/generated_certificate.p12"
              export PROFILE_PATH="$CM_BUILD_DIR/profile.mobileprovision"
              export CERT_PATH="$GENERATED_P12_PATH" # CERT_PATH will now point to the generated .p12
              
              # Create build directory
              mkdir -p "$CM_BUILD_DIR"
              
              echo "üîß Running in CI environment, downloading all files from URLs"
              echo "üîê iOS Code Signing Requirements:"
              echo "1. Distribution Certificate (.cer) and its matching Private Key (.key)"
              echo "2. Provisioning Profile (.mobileprovision) matching the App ID and certificate"
              echo ""
              echo "‚ö†Ô∏è Using certificate from URL: $CER_URL"
              echo "‚ö†Ô∏è Using private key from URL: $KEY_URL"
              echo "‚ö†Ô∏è Using profile from URL: $PROFILE_URL"
              echo ""

        - name: Download certificate, key, and profile files
          script: |
                set -euo pipefail
                trap 'echo "‚ùå Error on line $LINENO"' ERR
                
                echo "üîê Starting file handling and verification..."
                
                # Always download certificate and key files
                echo "üì• Downloading certificate from $CER_URL..."
                if ! curl -f -L -o "$CERT_CER_PATH" "$CER_URL"; then
                    echo "‚ùå Failed to download certificate (.cer)"
                    exit 1
                fi
                
                echo "üì• Downloading private key from $KEY_URL..."
                if ! curl -f -L -o "$PRIVATE_KEY_PATH" "$KEY_URL"; then
                    echo "‚ùå Failed to download private key (.key)"
                    exit 1
                fi
                
                # Always download profile file
                echo "üì• Downloading provisioning profile from $PROFILE_URL..."
                if ! curl -f -L -o "$PROFILE_PATH" "$PROFILE_URL"; then
                    echo "‚ùå Failed to download provisioning profile"
                    exit 1
                fi
                
                echo "‚úÖ Successfully downloaded all required files"

        - name: Verify provisioning profile
          script: |
                set -euo pipefail
                trap 'echo "‚ùå Error on line $LINENO"' ERR
                
                local profile_path="$PROFILE_PATH"
                local profile_plist_path="$PROFILE_PLIST_PATH"
                local bundle_id="$BUNDLE_ID"
                local apple_team_id="$APPLE_TEAM_ID"
                
                echo "üîç Verifying provisioning profile: $profile_path"
                
                # Check file size
                local profile_size
                profile_size=$(stat -f%z "$profile_path")
                if [ "$profile_size" -lt 1000 ]; then
                    echo "‚ùå Provisioning profile appears to be too small or corrupted"
                    exit 1
                fi
                
                # Convert profile to plist for verification
                if ! security cms -D -i "$profile_path" > "$profile_plist_path" 2>/dev/null; then
                    echo "‚ùå Failed to read provisioning profile"
                    exit 1
                fi
                
                # Verify profile details
                if ! /usr/libexec/PlistBuddy -c "Print :UUID" "$profile_plist_path" > /dev/null 2>&1; then
                    echo "‚ùå Invalid provisioning profile format"
                    exit 1
                fi
                
                # Check profile type (Support multiple distribution profile types)
                local profile_type
                local is_distribution=false
                
                # Check for Enterprise Distribution (ProvisionsAllDevices)
                profile_type=$(/usr/libexec/PlistBuddy -c "Print :ProvisionsAllDevices" "$profile_plist_path" 2>/dev/null || echo "false")
                if [ "$profile_type" = "true" ]; then
                    echo "‚úÖ Verified as Enterprise Distribution profile"
                    is_distribution=true
                fi
                
                # Check for App Store Distribution
                if ! $is_distribution; then
                    profile_type=$(/usr/libexec/PlistBuddy -c "Print :ProvisionsAllDevices" "$profile_plist_path" 2>/dev/null || echo "false")
                    # Check for a common App Store entitlement (e.g., icloud-container-identifiers)
                    local has_app_store=$(/usr/libexec/PlistBuddy -c "Print :Entitlements:com.apple.developer.icloud-container-identifiers" "$profile_plist_path" 2>/dev/null || echo "false")
                    # Or check for absence of ProvisionedDevices key, which is present in Ad Hoc/Development
                     local has_provisioned_devices=$(/usr/libexec/PlistBuddy -c "Print :ProvisionedDevices" "$profile_plist_path" 2>/dev/null || echo "false")
                
                    if [ "$profile_type" = "false" ] && [ "$has_app_store" != "false" ] && [ "$has_provisioned_devices" = "false" ]; then
                         echo "‚úÖ Verified as App Store Distribution profile"
                         is_distribution=true
                     fi
                 fi
                
                # Check for Ad Hoc Distribution
                if ! $is_distribution; then
                    local has_provisioned_devices=$(/usr/libexec/PlistBuddy -c "Print :ProvisionedDevices" "$profile_plist_path" 2>/dev/null || echo "false")
                    if [ "$has_provisioned_devices" != "false" ]; then
                        echo "‚úÖ Verified as Ad Hoc Distribution profile"
                        is_distribution=true
                    fi
                fi
                
                
                if ! $is_distribution; then
                    echo "‚ùå Profile is not a distribution profile (not Enterprise, App Store, or Ad Hoc)"
                    exit 1
                fi
                
                # Check team identifier
                local profile_team_id
                profile_team_id=$(/usr/libexec/PlistBuddy -c "Print :TeamIdentifier:0" "$profile_plist_path" 2>/dev/null)
                if [ "$profile_team_id" != "$apple_team_id" ]; then
                    echo "‚ùå Profile team ID ($profile_team_id) does not match expected team ID ($apple_team_id)"
                    exit 1
                fi
                
                # Check bundle identifier (prefix match for wildcard, exact match otherwise)
                local profile_bundle_id_entitlement
                profile_bundle_id_entitlement=$(/usr/libexec/PlistBuddy -c "Print :Entitlements:application-identifier" "$profile_plist_path" 2>/dev/null)
                
                local expected_app_id_prefix="$apple_team_id."
                if [[ "$profile_bundle_id_entitlement" == "$expected_app_id_prefix"* ]]; then
                    local profile_bundle_id_no_prefix=$(echo "$profile_bundle_id_entitlement" | sed "s/$expected_app_id_prefix//")
                    if [ "$profile_bundle_id_no_prefix" != "$bundle_id" ] && [ "$profile_bundle_id_no_prefix" != "*" ]; then
                        echo "‚ùå Profile bundle ID ($profile_bundle_id_no_prefix) does not match expected bundle ID ($bundle_id) and is not a wildcard profile"
                        exit 1
                    fi
                else
                    echo "‚ùå Profile application-identifier entitlement ($profile_bundle_id_entitlement) does not match expected Team ID prefix ($expected_app_id_prefix)"
                    exit 1
                fi
                
                # Check expiration
                local profile_expiry
                local current_date
                local profile_expiry_seconds
                
                profile_expiry=$(/usr/libexec/PlistBuddy -c "Print :ExpirationDate" "$profile_plist_path" 2>/dev/null)
                current_date=$(date +%s)
                # Note: macOS date command format might differ slightly in CI. Adjust if needed.
                profile_expiry_seconds=$(date -j -f "%Y-%m-%dT%H:%M:%SZ" "$profile_expiry" +%s 2>/dev/null || date -j -f "%a %b %d %H:%M:%S %Z %Y" "$profile_expiry" +%s 2>/dev/null) # Added alternative format
                
                if [ -z "$profile_expiry_seconds" ]; then
                   echo "‚ùå Could not parse profile expiration date: $profile_expiry"
                   exit 1
                fi
                
                
                if [ "$current_date" -ge "$profile_expiry_seconds" ]; then
                    echo "‚ùå Provisioning profile has expired on $profile_expiry"
                    exit 1
                fi
                
                # Display profile information
                echo "üìã Profile Information:"
                echo "------------------------"
                echo "UUID: $(/usr/libexec/PlistBuddy -c "Print :UUID" "$profile_plist_path")"
                echo "Name: $(/usr/libexec/PlistBuddy -c "Print :Name" "$profile_plist_path")"
                echo "Expiration: $profile_expiry"
                echo "Team ID: $profile_team_id"
                echo "Bundle ID: $profile_bundle_id_entitlement"
                echo "------------------------"
                
                echo "‚úÖ Provisioning profile verification successful"

        - name: Generate and verify .p12 file
          script: |
                set -euo pipefail
                trap 'echo "‚ùå Error on line $LINENO"' ERR
                
                local cert_password="$CERT_PASSWORD" # Use the provided CERT_PASSWORD for the private key
                local keychain_password="$KEYCHAIN_PASSWORD" # Use the simplified password for the .p12 container
                
                echo "üì¶ Generating .p12 file from .cer and .key..."
                # Use -aes256 to ensure compatible encryption
                # Using the simplified KEYCHAIN_PASSWORD for the .p12 file container password
                # Using CERT_PASSWORD for the private key password if it's encrypted
                openssl pkcs12 -export \
                  -inkey "$PRIVATE_KEY_PATH" \
                  -in "$CERT_CER_PATH" \
                  -out "$GENERATED_P12_PATH" \
                  -name "Apple Distribution" \
                  -passin "pass:$cert_password" \
                  -passout "pass:$keychain_password" \
                  -aes256 || {
                    echo "‚ùå Failed to generate .p12"
                    echo "Possible reasons:"
                    echo "1. Private key ($PRIVATE_KEY_PATH) does not match certificate ($CERT_CER_PATH)"
                    echo "2. Passphrase for the private key (if encrypted) is incorrect (check CERT_PASSWORD)"
                    echo "3. OpenSSL command syntax error"
                    echo "4. Certificate or key file is corrupted"
                    exit 1
                }
                
                echo "‚úÖ .p12 file created at: $GENERATED_P12_PATH"
                
                # === STEP 3: Verify .p12 ===
                echo "üîç Verifying .p12 file..."
                # Use the password set during export ($KEYCHAIN_PASSWORD)
                openssl pkcs12 -info -in "$GENERATED_P12_PATH" -passin "pass:$keychain_password" -nokeys -noout || {
                  echo "‚ùå Verification failed: .p12 password is incorrect or file is corrupt"
                  echo "The password used for verification ('$keychain_password') does not work."
                  echo "This indicates an issue with the openssl export process or the password."
                  exit 1
                }
                
                echo "‚úÖ .p12 verified successfully and password works"
                
                # Clean up temporary public key files (if they exist from previous runs)
                rm -f "$CM_BUILD_DIR/cert_pubkey.pem" "$CM_BUILD_DIR/key_pubkey.pem" 2>/dev/null
                
                echo "‚úÖ All file verifications passed successfully"

        - name: Update Project Configuration (Name, Bundle ID, Version)
          script: |
                set -euo pipefail
                trap 'echo "‚ùå Error on line $LINENO"' ERR
                
                local app_name="$APP_NAME"
                local pkg_name="$PKG_NAME"
                local version_name="$VERSION_NAME"
                local version_code="$VERSION_CODE"
                
                echo "*********** App Name & Version ***********"
                echo "APP_NAME: $app_name"
                echo "ORG_NAME: $ORG_NAME" # Keep for info, not directly used in this block
                echo "WEB_URL: $WEB_URL"   # Keep for info, not directly used in this block
                echo "VERSION_NAME: $version_name"
                echo "VERSION_CODE: $version_code"
                echo "PKG_NAME: $pkg_name"
                echo "BUNDLE_ID: $BUNDLE_ID" # Should be same as PKG_NAME for iOS
                
                echo "App Name: $app_name"
                # 2Ô∏è‚É£ Sanitize: lowercase, remove special characters, replace spaces with underscores
                SANITIZED_NAME=$(echo "$app_name" | tr '[:upper:]' '[:lower:]' | tr -cd 'a-z0-9 ' | tr ' ' '_')
                
                # 3Ô∏è‚É£ Extract old name from pubspec.yaml
                OLD_NAME_LINE=$(grep '^name: ' pubspec.yaml)
                # Check if OLD_NAME_LINE is found to avoid errors
                if [ -z "$OLD_NAME_LINE" ]; then
                    echo "‚ùå Could not find 'name:' in pubspec.yaml. Cannot rename project."
                    exit 1
                fi
                OLD_NAME=$(echo "$OLD_NAME_LINE" | cut -d ' ' -f2)
                
                echo "üîÅ Renaming project from '$OLD_NAME' to '$SANITIZED_NAME'..."
                
                # Update pubspec.yaml
                # Using | as delimiter for sed to handle potential slashes in paths (though unlikely here)
                sed -i '' "s|^name: .*|name: $SANITIZED_NAME|" pubspec.yaml
                
                # Update Dart imports
                echo "üîÑ Updating Dart package imports..."
                # Use a different delimiter (like @) for sed to avoid issues with slashes in package names
                grep -rl "package:$OLD_NAME" lib/ | xargs sed -i '' "s@package:$OLD_NAME@package:$SANITIZED_NAME@g" || true # Allow grep/sed to fail if no matches
                
                # iOS: Update CFBundleName in Info.plist
                echo "üõ†Ô∏è Updating iOS CFBundleName..."
                # Using || true in case the key doesn't exist initially, plutil -replace will add it.
                plutil -replace CFBundleName -string "$app_name" ios/Runner/Info.plist || true
                
                # Note: Renaming the actual project folder is typically not done in CI
                
                echo "‚úÖ Project name, Dart imports, and iOS CFBundleName updated."
                
                echo "üîß Updating Android and iOS package name (bundle ID)..."
                
                # Validate package/bundle ID format (Java-style, dot-separated)
                if [[ ! "$pkg_name" =~ ^[a-zA-Z_][a-zA-Z0-9_]*(\.[a-zA-Z_][a-zA-Z0-9_]*)+$ ]]; then
                  echo "‚ùå ERROR: Invalid package/bundle identifier: $pkg_name"
                  exit 1
                fi
                
                echo "‚úî Package name / Bundle ID: $pkg_name"
                
                echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ANDROID UPDATE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
                echo "üì¶ Updating Android package..."
                
                # Update using rename package (if installed) - ensure it's in pubspec.yaml dev_dependencies
                # This command might require flutter pub get before running.
                # We'll assume flutter pub get is run later or done implicitly by a build step.
                # If 'rename' is not used or causes issues, manual sed commands are alternatives.
                # flutter pub run rename setBundleId --value "$pkg_name" || { echo "‚ö†Ô∏è 'flutter pub run rename setBundleId' failed or not found. Skipping automated rename package update."; }
                
                # Update package name in AndroidManifest.xml
                # Using @ as delimiter for sed
                sed -i.bak "s@package=\"[^\"]*\"@package=\"$pkg_name\"@g" android/app/src/main/AndroidManifest.xml
                
                # Update applicationId in Kotlin DSL (build.gradle.kts)
                BUILD_FILE="android/app/build.gradle.kts"
                if [ -f "$BUILD_FILE" ]; then
                  # Use a different delimiter for sed to handle potential dots in package names
                  sed -i.bak -E "s@applicationId\\s*=\\s*\"[^\"]+\"@applicationId = \"$pkg_name\"@" "$BUILD_FILE"
                  echo "‚úÖ Updated applicationId in Kotlin DSL"
                else
                  echo "‚ö†Ô∏è build.gradle.kts not found. Skipping Android applicationId update."
                fi
                
                echo "‚úÖ Android package updated."
                
                echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ iOS UPDATE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
                echo "üçè Updating iOS bundle identifier..."
                
                IOS_PROJECT_FILE="ios/Runner.xcodeproj/project.pbxproj"
                if [ -f "$IOS_PROJECT_FILE" ]; then
                  # Use a different delimiter for sed
                  sed -i.bak "s@PRODUCT_BUNDLE_IDENTIFIER = .*@PRODUCT_BUNDLE_IDENTIFIER = $pkg_name;@g" "$IOS_PROJECT_FILE"
                  echo "‚úÖ iOS bundle identifier updated."
                else
                  echo "‚ùå iOS project file not found at $IOS_PROJECT_FILE"
                  exit 1
                fi
                
                echo "‚úÖ App name changed and package/bundle ID set successfully"
                
                
                echo "üî¢ Updating app version to: $version_name+$version_code"
                # Default values - already handled by environment vars, but defensive
                local default_version_name="1.0.0"
                local default_version_code="100"
                
                # Check if VERSION_NAME is empty or not set
                if [ -z "$version_name" ]; then
                  version_name=$default_version_name
                  echo "üî¢ Setting DEFAULT_VERSION_NAME: $version_name"
                fi
                
                # Check if VERSION_CODE is empty or not set
                if [ -z "$version_code" ]; then
                  version_code=$default_version_code
                  echo "üî¢ Setting DEFAULT_VERSION_CODE: $version_code"
                fi
                
                echo "üî¢ Using version: $version_name+$version_code"
                
                echo "üîß Ensuring valid version in pubspec.yaml: $version_name+$version_code"
                # Replace or add version line in pubspec.yaml
                if grep -q "^version: " pubspec.yaml; then
                  # Using | as delimiter for sed
                  sed -i.bak -E "s|^version: .*|version: $version_name+$version_code|" pubspec.yaml
                else
                  # If version line doesn't exist, add it below the name line
                  # Use a different delimiter for sed
                  sed -i.bak "/^name: /a\\
                version: $version_name+$version_code" pubspec.yaml
                echo "Added version line to pubspec.yaml"
                fi
                
                # Clean up sed backup files
                find . -name "*.bak" -delete
                echo "‚úÖ App version set successfully"


        - name: Handle Assets (Logo, Splash, Icons)
          script: |
              set -euo pipefail
              trap 'echo "‚ùå Error on line $LINENO"' ERR
              
              local logo_url="$LOGO_URL"
              local is_splash="$IS_SPLASH"
              local splash_url="$SPLASH"
              local splash_bg_url="$SPLASH_BG"
              
              echo "üßπ Deleting old splash and logo assets..."
              
              # Use find with -delete for robustness
              find assets/images/ -name "logo.png" -delete || true # Allow failure if file not found
              find assets/images/ -name "splash.png" -delete || true # Allow failure if file not found
              find assets/images/ -name "splash_bg.png" -delete || true # Allow failure if file not found
              echo "‚úÖ Deleted old assets (if they existed)."
              
              echo "üöÄ Started: Downloading logo from $logo_url"
              mkdir -p assets/images/
              
              # Use curl as it's generally preferred in CI environments
              if ! curl -f -L -o assets/images/logo.png "$logo_url"; then
                  echo "‚ùå Error: Failed to download logo from $logo_url"
                  exit 1
              fi
              echo "‚úÖ Completed: Logo downloaded to assets/images/logo.png"
              
              echo "üöÄ Generating launcher icons"
              # Assumes flutter_launcher_icons is in dev_dependencies and configured in pubspec.yaml
              flutter pub run flutter_launcher_icons || {
                  echo "‚ùå Failed to generate launcher icons. Is flutter_launcher_icons configured correctly in pubspec.yaml?"
                  exit 1
              }
              echo "‚úÖ Launcher icons generated successfully"
              
              if [ "$is_splash" = "true" ]; then
                  echo "üöÄ Started: Downloading splash assets"
                  mkdir -p assets/images/ # Ensure directory exists
              
                  # Download splash logo
                  echo "‚¨áÔ∏è Downloading splash logo from: $splash_url"
                  if ! curl -f -L -o assets/images/splash.png "$splash_url"; then
                    echo "‚ùå Error: Failed to download SPLASH logo from $splash_url"
                    exit 1
                  fi
                  echo "‚úÖ Splash logo downloaded."
              
                  # Download splash background (optional)
                  if [ -n "$splash_bg_url" ]; then
                    echo "‚¨áÔ∏è Downloading splash background from: $splash_bg_url"
                    if ! curl -f -L -o assets/images/splash_bg.png "$splash_bg_url"; then
                      echo "‚ùå Error: Failed to download SPLASH background from $splash_bg_url"
                       # This might not be a fatal error depending on splash implementation, but report it.
                       echo "‚ö†Ô∏è Warning: Failed to download splash background."
                    else
                       echo "‚úÖ Splash background downloaded."
                    fi
                  else
                    echo "‚ÑπÔ∏è No SPLASH_BG provided, skipping background download"
                  fi
              
                  echo "‚úÖ Completed: Splash assets handled"
              else
                  echo "‚è≠Ô∏è Skipping splash asset download (IS_SPLASH != true)"
              fi
              
              # Ensure pubspec.yaml changes and downloaded assets are picked up
              flutter pub get # Running this again after file changes/downloads

        - name: Clean and Install CocoaPods
          script: |
              set -euo pipefail
              trap 'echo "‚ùå Error on line $LINENO"' ERR
              
              echo "üßπ Deleting old CocoaPods artifacts..."
              # Use find with -delete for robustness
              find ios/ -name "Pods" -exec rm -rf {} + || true
              find ios/ -name "Podfile.lock" -delete || true
              find ios/ -name ".symlinks" -delete || true
              find ios/Flutter/ -name "Flutter.podspec" -delete || true
              echo "‚úÖ Deleted old CocoaPods artifacts (if they existed)."
              
              cd ios
              
              # Generate Podfile
              echo "üìÑ Generating Podfile..."
              cat > Podfile <<EOF
                  platform :ios, '13.0'
                  ENV['COCOAPODS_DISABLE_STATS'] = 'true'
            
                  project 'Runner', {
                  'Debug' => :debug,
                  'Profile' => :release,
                  'Release' => :release,
                }
                
                def flutter_root
                File.foreach(File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)) do |line|
                matches = line.match(/FLUTTER_ROOT=(.*)/)
                return matches[1].strip if matches
                end
                raise "FLUTTER_ROOT not found"
                end
                
                require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)
                
                flutter_ios_podfile_setup
                
                target 'Runner' do
                use_frameworks!
                use_modular_headers!
                flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
                
                post_install do |installer|
                installer.pods_project.targets.each do |target|
                flutter_additional_ios_build_settings(target)
                target.build_configurations.each do |config|
                # Set automatic code signing for all pod targets or inherit
                # Codemagic's automatic code signing should handle this
                config.build_settings.delete('CODE_SIGN_STYLE')
                config.build_settings.delete('DEVELOPMENT_TEAM') # Should be handled by CM
                config.build_settings.delete('PROVISIONING_PROFILE_SPECIFIER') # Should be handled by CM
                config.build_settings.delete('CODE_SIGN_IDENTITY') # Should be handled by CM
                config.build_settings['CODE_SIGNING_REQUIRED'] = 'YES'
                config.build_settings['CODE_SIGNING_ALLOWED'] = 'YES'
                config.build_settings.delete('EXPANDED_CODE_SIGN_IDENTITY')
                config.build_settings.delete('CODE_SIGN_ENTITLEMENTS') # Handled by Runner target entitlements
                # Ensure Pods do NOT have OTHER_CODE_SIGN_FLAGS pointing to a specific keychain
                config.build_settings.delete('OTHER_CODE_SIGN_FLAGS')
                
                # Other common settings
                config.build_settings['ENABLE_BITCODE'] = 'NO'
                config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
                if config.build_settings['SDKROOT'] == 'iphoneos'
                config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64'
                end
                end
                end
                end
                end
                EOF
                echo "‚úÖ Podfile generated."
                
                # Install CocoaPods dependencies
                echo "üì• Installing CocoaPods dependencies..."
                # Clean pod cache for a fresh start
                pod cache clean --all || true # Allow failure if cache is empty
                # Deintegrate and Install
                pod deintegrate || true # Allow failure if not integrated
                pod install --repo-update || {
                echo "‚ùå pod install failed"
                exit 1
              }
                echo "‚úÖ CocoaPods installation complete."
                cd ..

        - name: Update Xcode Project Settings via Ruby
          script: |
                set -euo pipefail
                trap 'echo "‚ùå Error on line $LINENO"' ERR
                
                local apple_team_id="$APPLE_TEAM_ID"
                local bundle_id="$BUNDLE_ID"
                # Get PROFILE_NAME and CODE_SIGN_IDENTITY from environment (set by Codemagic's signing)
                # Need to confirm if CM sets these or if we need to derive them.
                # If using CM's automatic signing, these variables might be implicitly handled or available differently.
                # Assuming CM sets relevant variables or xcodebuild picks up from CM's keychain/profile setup.
                # We can pass TEAM_ID, PROVISIONING_PROFILE, and CODE_SIGN_IDENTITY to xcodebuild directly later.
                
                echo "üõ†Ô∏è Updating Xcode project settings for code signing..."
                cd ios
                ruby <<EOF
                require 'xcodeproj'
                project = Xcodeproj::Project.open('Runner.xcodeproj')
                project.targets.each do |target|
                if target.name == 'Runner'
                target.build_configurations.each do |config|
                # Set manual code signing for Runner target (aligns with CM manual setup)
                config.build_settings['CODE_SIGN_STYLE'] = 'Manual'
                # Use environment variables for dynamic values
                config.build_settings['DEVELOPMENT_TEAM'] = ENV['APPLE_TEAM_ID']
                # PROVISIONING_PROFILE_SPECIFIER: Can set this if PROFILE_NAME is available, or rely on xcodebuild parameter
                # config.build_settings['PROVISIONING_PROFILE_SPECIFIER'] = ENV['PROFILE_NAME']
                # CODE_SIGN_IDENTITY: Can set this if CODE_SIGN_IDENTITY is available, or rely on xcodebuild parameter
                # config.build_settings['CODE_SIGN_IDENTITY'] = ENV['CODE_SIGN_IDENTITY']
                config.build_settings['CODE_SIGNING_REQUIRED'] = 'YES'
                config.build_settings['CODE_SIGNING_ALLOWED'] = 'YES'
                config.build_settings.delete('EXPANDED_CODE_SIGN_IDENTITY') # Clean up
                config.build_settings['CODE_SIGN_INJECT_BASE_ENTITLEMENTS'] = 'YES'
                config.build_settings['CODE_SIGN_ENTITLEMENTS'] = 'Runner/Runner.entitlements'
                # OTHER_CODE_SIGN_FLAGS: Remove manual keychain flag if using CM's keychain
                config.build_settings.delete('OTHER_CODE_SIGN_FLAGS')
                end
                else
                # Ensure Pod targets use automatic signing or inherit from the project
                target.build_configurations.each do |config|
                config.build_settings.delete('CODE_SIGN_STYLE') # Use project default/CM handling
                config.build_settings.delete('DEVELOPMENT_TEAM') # Should be handled by CM
                config.build_settings.delete('PROVISIONING_PROFILE_SPECIFIER') # Should be handled by CM
                config.build_settings.delete('CODE_SIGN_IDENTITY') # Should be handled by CM
                # No, do not require signing for pods - let Xcode/Cocoapods handle based on parent target
                # config.build_settings['CODE_SIGNING_REQUIRED'] = 'YES'
                # config.build_settings['CODE_SIGNING_ALLOWED'] = 'YES'
                config.build_settings.delete('CODE_SIGNING_REQUIRED')
                config.build_settings.delete('CODE_SIGNING_ALLOWED')
                config.build_settings.delete('EXPANDED_CODE_SIGN_IDENTITY') # Clean up
                config.build_settings.delete('CODE_SIGN_ENTITLEMENTS') # Pods don't usually need entitlements
                config.build_settings.delete('OTHER_CODE_SIGN_FLAGS') # Explicitly remove to prevent interference
                end
                end
                end
                project.save
                EOF
                cd ..
                echo "‚úÖ Xcode project settings updated."

        - name: Create Entitlements File
          script: |
                set -euo pipefail
                trap 'echo "‚ùå Error on line $LINENO"' ERR
                
                local apple_team_id="$APPLE_TEAM_ID"
                local bundle_id="$BUNDLE_ID"
                
                echo "üìÑ Ensuring entitlements file exists..."
                mkdir -p ios/Runner
                ENTITLEMENTS_FILE="ios/Runner/Runner.entitlements"
                cat > "$ENTITLEMENTS_FILE" <<EOF
                <?xml version="1.0" encoding="UTF-8"?>
                <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
                <plist version="1.0">
                <dict>
                  <key>com.apple.security.app-sandbox</key>
                  <false/> # Typically false for distribution apps that access user files etc.
                  <key>com.apple.security.network.client</key>
                  <true/>
                  <key>com.apple.developer.team-identifier</key>
                  <string>${apple_team_id}</string>
                  <key>keychain-access-groups</key>
                  <array>
                  <string>${apple_team_id}.*</string>
                  </array>
                  <key>get-task-allow</key>
                  <false/> # Should be false for Release builds
                  <key>application-identifier</key>
                  <string>${apple_team_id}.${bundle_id}</string>
                
                # Add other entitlements here as needed (e.g., push notifications, associated domains, etc.)
                # <key>aps-environment</key>
                # <string>production</string>
                # <key>com.apple.developer.associated-domains</key>
                # <array>
                #   <string>applinks:yourwebsite.com</string>
                # </array>
                
                </dict>
                </plist>
                EOF
                
                # Validate entitlements file
                if ! plutil -lint "$ENTITLEMENTS_FILE" > /dev/null; then
                echo "‚ùå Entitlements file has a syntax error: $ENTITLEMENTS_FILE"
                exit 1
                fi
                echo "‚úÖ Entitlements file created and checked."

        - name: Archive the app
          script: |
              set -euo pipefail
              trap 'echo "‚ùå Error on line $LINENO"' ERR
              
              local cm_build_dir="$CM_BUILD_DIR"
              
              echo "üèóÔ∏è Archiving the app..."
              cd ios
              # Using CM_BUILD_DIR for archive path as defined earlier
              # Relying on Codemagic's App Signing features to handle CODE_SIGN_IDENTITY, etc.
              xcodebuild -workspace Runner.xcworkspace \
                -scheme Runner \
                -configuration Release \
                -archivePath "$cm_build_dir/Runner.xcarchive" \
                -sdk iphoneos \
                -destination 'generic/platform=iOS' \
                -allowProvisioningUpdates \
                archive || {
                  echo "‚ùå Xcode archive failed"
                  exit 1
                }
              cd ..
              echo "‚úÖ Archive created at $cm_build_dir/Runner.xcarchive."

        - name: Export the IPA
          script: |
                set -euo pipefail
                trap 'echo "‚ùå Error on line $LINENO"' ERR
                
                local cm_build_dir="$CM_BUILD_DIR"
                # PROFILE_NAME is likely needed for ExportOptions.plist generation if not hardcoded
                # Or, better, let Codemagic generate ExportOptions.plist for you.
                # If using CM's automatic signing, ExportOptions.plist is often automatically handled.
                # If you need a custom ExportOptions.plist, ensure it's generated or available.
                # Assuming for now a simple ExportOptions.plist is needed, let's create a basic one.
                
                echo "üì¶ Exporting IPA from archive..."
                # Create a basic ExportOptions.plist
                # This needs to be adjusted based on your distribution method (app-store, ad-hoc, enterprise, development)
                # Based on your profile verification saying Ad Hoc, let's create an Ad Hoc plist.
                cat > "$cm_build_dir/ExportOptions.plist" <<EOF
              <?xml version="1.0" encoding="UTF-8"?>
              <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
              <plist version="1.0">
              <dict>
                <key>method</key>
                <string>ad-hoc</string> # Change to app-store, enterprise, or development as needed
                <key>provisioningProfiles</key>
                <dict>
                # If using manual provisioning, map bundle ID to profile name
                  <key>$(BUNDLE_ID)</key>
                  <string>$(PROFILE_NAME)</string>
                # Or, rely on automatic signing which doesn't need this map
                </dict>
                <key>signingCertificate</key>
                <string>Apple Distribution</string> # Or the exact name of your signing cert if needed
                <key>signingStyle</key>
                <string>manual</string> # Matches the manual style set in Ruby script
                <key>stripSwiftSymbols</key>
                <true/>
                <key>teamID</key>
                <string>$(APPLE_TEAM_ID)</string>
                <key>uploadBitcode</key>
                <false/>
                <key>uploadSymbols</key>
                <true/>
              </dict>
              </plist>
              EOF
              # Validate ExportOptions.plist
              if ! plutil -lint "$cm_build_dir/ExportOptions.plist" > /dev/null; then
              echo "‚ùå ExportOptions.plist has a syntax error: $cm_build_dir/ExportOptions.plist"
              exit 1
              fi
              echo "‚úÖ ExportOptions.plist created and checked."
              
              
              xcodebuild -exportArchive \
              -archivePath "$cm_build_dir/Runner.xcarchive" \
              -exportOptionsPlist "$cm_build_dir/ExportOptions.plist" \
              -exportPath "$cm_build_dir/export" \
              -allowProvisioningUpdates || {
              echo "‚ùå Xcode export failed"
              exit 1
              }
              echo "‚úÖ IPA exported to $cm_build_dir/export."
    
        - name: Final Cleanup
          script: |
              set -euo pipefail
              trap 'echo "‚ùå Error on line $LINENO"' ERR
              
              local cm_build_dir="$CM_BUILD_DIR"
              
              echo "üßπ Performing final cleanup..."
              
              # Remove temporary profile plist
              if [ -f "$cm_build_dir/profile.plist" ]; then
                  rm "$cm_build_dir/profile.plist"
                  echo "üßπ Removed temporary profile plist file."
              fi
              
              # Remove temporary code signing env file (if it was created)
              if [ -f "$cm_build_dir/code_signing_env.sh" ]; then
                  rm "$cm_build_dir/code_signing_env.sh"
                  echo "üßπ Removed temporary code signing env file."
              fi
              
              # Remove downloaded certificate and key files (if they exist)
               if [ -f "$cm_build_dir/certificate.cer" ]; then
                  rm "$cm_build_dir/certificate.cer"
                  echo "üßπ Removed downloaded certificate file."
               fi
                if [ -f "$cm_build_dir/private.key" ]; then
                  rm "$cm_build_dir/private.key"
                  echo "üßπ Removed downloaded private key file."
               fi
               # Remove generated .p12 file
                if [ -f "$cm_build_dir/generated_certificate.p12" ]; then
                  rm "$cm_build_dir/generated_certificate.p12"
                  echo "üßπ Removed generated .p12 file."
               fi
                # Remove downloaded provisioning profile (if not using CM's upload)
                if [ -f "$cm_build_dir/profile.mobileprovision" ]; then
                  rm "$cm_build_dir/profile.mobileprovision"
                  echo "üßπ Removed downloaded provisioning profile file."
               fi
              
              # Temporary keychain cleanup is handled by Codemagic
              
              echo "‚úÖ Final cleanup complete."

    artifacts:
      - build/ios/iphoneos/Runner.app
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM

    publishing:
      email:
        recipients:
          - $EMAIL_ID
        notify:
          success: true
          failure: true

  ios-and-android-workflow:
    name: iOS and Android Workflow
    max_build_duration: 30
    instance_type: mac_mini_m1
    environment:
      flutter: stable
    scripts:
      - *change_proj_name
      - *debug_env
      - *update_package_names
      - *change_app_name
      - *Update_SDK_Version
      - *Update_App_Version
      - *key_store
      - *get_json
      - *Inject_Firebase_Services
      - *get_logo
      - *get_splash
      - *set_launcher_icons
      - *build_apk_release
      - *Inject_iOS_Firebase_Push
      - name: Set up environment and code signing
        script: |
          # Create a new keychain
          KEYCHAIN_NAME="build.keychain"
          KEYCHAIN_PASSWORD="temporary"

          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
          security default-keychain -s "$KEYCHAIN_NAME"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
          security set-keychain-settings -t 3600 -u "$KEYCHAIN_NAME"

          # Download and import certificate
          curl -o certificate.p12 "$CERT_URL"
          security import certificate.p12 -k "$KEYCHAIN_NAME" -P "$CERT_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"

          # Download and set up provisioning profile
          curl -o profile.mobileprovision "$PROFILE_URL"
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles

          # Extract profile info
          PROFILE_PLIST=$(mktemp)
          security cms -D -i profile.mobileprovision > "$PROFILE_PLIST"
          UUID=$(/usr/libexec/PlistBuddy -c "Print UUID" "$PROFILE_PLIST")
          PROFILE_NAME=$(/usr/libexec/PlistBuddy -c "Print Name" "$PROFILE_PLIST")

          # Install profile
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/"$UUID".mobileprovision

          # Export variables for later use
          echo "PROFILE_NAME=$PROFILE_NAME" >> $CM_ENV
          echo "PROFILE_UUID=$UUID" >> $CM_ENV

      - name: Update iOS configuration
        script: |
          cd ios

          # Update minimum iOS version in Podfile
          echo "platform :ios, '13.0'" > Podfile.new
          tail -n +2 Podfile >> Podfile.new
          mv Podfile.new Podfile

          # Update project settings
          sed -i '' 's/IPHONEOS_DEPLOYMENT_TARGET = .*/IPHONEOS_DEPLOYMENT_TARGET = 13.0;/g' Runner.xcodeproj/project.pbxproj

          # Clean and setup pods
          rm -rf Pods Podfile.lock
          pod repo update
          pod install --repo-update
          cd ..

      - name: Build Flutter app
        script: |
          # Clean everything first
          flutter clean
          
          # Get dependencies and generate necessary files
          flutter pub get
          
          # Setup iOS specific files
          flutter precache --ios
          
          # Generate Flutter framework files
          cd ios
          rm -rf Pods Podfile.lock
          rm -rf .symlinks/
          rm -rf Flutter/Flutter.framework
          rm -rf Flutter/Flutter.podspec
          cd ..
          
          flutter build ios-framework --no-profile --no-release
          
          # Setup pods
          cd ios
          pod deintegrate || true
          pod cache clean --all
          pod repo update
          pod install --repo-update --verbose
          cd ..
          
          # Build the app
          flutter build ios --release --no-codesign \
            --dart-define=WEB_URL="$WEB_URL" \
            --dart-define=PUSH_NOTIFY="$PUSH_NOTIFY" \
            --dart-define=PKG_NAME="$PKG_NAME" \
            --dart-define=APP_NAME="$APP_NAME" \
            --dart-define=ORG_NAME="$ORG_NAME" \
            --dart-define=VERSION_NAME="$VERSION_NAME" \
            --dart-define=VERSION_CODE="$VERSION_CODE" \
            --dart-define=EMAIL_ID="$EMAIL_ID" \
            --dart-define=IS_SPLASH="$IS_SPLASH" \
            --dart-define=SPLASH="$SPLASH" \
            --dart-define=SPLASH_BG="$SPLASH_BG" \
            --dart-define=SPLASH_ANIMATION="$SPLASH_ANIMATION" \
            --dart-define=SPLASH_BG_COLOR="$SPLASH_BG_COLOR" \
            --dart-define=SPLASH_TAGLINE="$SPLASH_TAGLINE" \
            --dart-define=SPLASH_TAGLINE_COLOR="$SPLASH_TAGLINE_COLOR" \
            --dart-define=SPLASH_DURATION="$SPLASH_DURATION" \
            --dart-define=IS_PULLDOWN="$IS_PULLDOWN" \
            --dart-define=LOGO_URL="$LOGO_URL" \
            --dart-define=IS_BOTTOMMENU="$IS_BOTTOMMENU" \
            --dart-define=BOTTOMMENU_ITEMS="$BOTTOMMENU_ITEMS" \
            --dart-define=BOTTOMMENU_BG_COLOR="$BOTTOMMENU_BG_COLOR" \
            --dart-define=BOTTOMMENU_ICON_COLOR="$BOTTOMMENU_ICON_COLOR" \
            --dart-define=BOTTOMMENU_TEXT_COLOR="$BOTTOMMENU_TEXT_COLOR" \
            --dart-define=IS_CHATBOT="$IS_CHATBOT" \
            --dart-define=IS_DEEPLINK="$IS_DEEPLINK" \
            --dart-define=IS_LOAD_IND="$IS_LOAD_IND" \
            --dart-define=IS_CAMERA="$IS_CAMERA" \
            --dart-define=IS_LOCATION="$IS_LOCATION" \
            --dart-define=IS_BIOMETRIC="$IS_BIOMETRIC" \
            --dart-define=IS_MIC="$IS_MIC" \
            --dart-define=IS_CONTACT="$IS_CONTACT" \
            --dart-define=IS_CALENDAR="$IS_CALENDAR" \
            --dart-define=IS_NOTIFICATION="$IS_NOTIFICATION" \
            --dart-define=IS_STORAGE="$IS_STORAGE" || {
              echo "‚ùå Failed to build Flutter app"
              exit 1
            }

      - name: Archive and export IPA
        script: |
          cd ios

          # Load profile info from environment
          source $CM_ENV

          # Create exportOptions.plist
          cat > exportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>teamID</key>
              <string>$APPLE_TEAM_ID</string>
              <key>signingStyle</key>
              <dict>
                  <key>$BUNDLE_ID</key>
                  <string>manual</string>
              </dict>
              <key>signingCertificate</key>
              <string>Apple Distribution</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>$BUNDLE_ID</key>
                  <string>$PROFILE_NAME</string>
              </dict>
              <key>compileBitcode</key>
              <false/>
              <key>stripSwiftSymbols</key>
              <true/>
          </dict>
          </plist>
          EOF

          # Archive
          xcodebuild -workspace Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -archivePath build/Runner.xcarchive \
            clean archive \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM=$APPLE_TEAM_ID \
            PROVISIONING_PROFILE_SPECIFIER="$PROFILE_NAME" \
            PROVISIONING_PROFILE="$PROFILE_UUID" \
            PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            IPHONEOS_DEPLOYMENT_TARGET=13.0 \
            OTHER_CODE_SIGN_FLAGS="--keychain $KEYCHAIN_NAME" || {
              echo "‚ùå Failed to archive iOS app"
              exit 1
            }

          # Export IPA
          xcodebuild -exportArchive \
            -archivePath build/Runner.xcarchive \
            -exportPath build/ios/ipa \
            -exportOptionsPlist exportOptions.plist \
            -allowProvisioningUpdates || {
              echo "‚ùå Failed to export IPA"
              exit 1
            }

          # Cleanup
          security delete-keychain "$KEYCHAIN_NAME" || true
          rm -f certificate.p12 profile.mobileprovision exportOptions.plist

    artifacts:
      - *android_apk
      - *android_abb
      - build/ios/iphoneos/Runner.app
      - build/ios/ipa/*.ipa
      - flutter_build_apk.log
      - flutter_build_aab.log
    publishing: *email_release

  android-free-workflow:
    name: Android Free APK Workflow
    max_build_duration: 120
    environment:
      java: 17
      vars:
        PUSH_NOTIFY: "false"
    scripts:
      - name: Set up local.properties
        script: |
          echo "flutter.sdk=$HOME/programs/flutter" > "$CM_BUILD_DIR/android/local.properties"
      - name: Get Flutter packages
        script: |
          flutter pub get
      - name: Build Free APK
        script: |
          flutter build apk --release \
            --dart-define=PUSH_NOTIFY=false \
            --dart-define=APP_NAME="$APP_NAME Free"
    artifacts:
      - build/**/outputs/**/*.apk

  android-paid-workflow:
    name: Android Paid APK/AAB Workflow
    max_build_duration: 120
    environment:
      java: 17
      vars:
        PUSH_NOTIFY: "true"
    scripts:
      - name: Set up local.properties
        script: |
          echo "flutter.sdk=$HOME/programs/flutter" > "$CM_BUILD_DIR/android/local.properties"
      - name: Get Flutter packages
        script: |
          flutter pub get
      - name: Setup Firebase
        script: |
          if [ -n "$firebase_config_android" ]; then
            mkdir -p android/app
            wget -O android/app/google-services.json "$firebase_config_android"
            if [ ! -f android/app/google-services.json ]; then
              echo "‚ùå Failed to download google-services.json"
              exit 1
            fi
          fi
      - name: Build Paid APK and AAB
        script: |
          flutter build apk --release \
            --dart-define=PUSH_NOTIFY=true
          flutter build appbundle --release \
            --dart-define=PUSH_NOTIFY=true
    artifacts:
      - build/**/outputs/**/*.apk
      - build/**/outputs/**/*.aab

  combined-workflow:
    name: Combined Release Workflow
    triggering:
      events:
        - tag
      branch_patterns:
        - pattern: release/*
          include: true
          source: true
    environment:
      java: 17
      xcode: latest
      cocoapods: default
    scripts:
      - name: Build all variants
        script: |
          # Build free Android APK
          flutter build apk --release --dart-define=PUSH_NOTIFY=false
          
          # Build paid Android APK/AAB with Firebase
          if [ -n "$firebase_config_android" ]; then
            mkdir -p android/app
            wget -O android/app/google-services.json "$firebase_config_android"
            flutter build apk --release --dart-define=PUSH_NOTIFY=true
            flutter build appbundle --release --dart-define=PUSH_NOTIFY=true
          fi
          
          # Build iOS
          if [ -n "$firebase_config_ios" ]; then
            curl -o ios/Runner/GoogleService-Info.plist "$firebase_config_ios"
          fi
          
          cd ios
          pod install
          cd ..
          
          flutter build ios --release --no-codesign
    artifacts:
      - build/**/outputs/**/*.apk
      - build/**/outputs/**/*.aab
      - build/ios/ipa/*.ipa